from __future__ import division
from shutil import move

from pyglet.gl import * #TODO write tutorial onto how to install pyglet (latest version from mercurial repo), offer binaries
from pyglet.window import key
import sys
import math
import time
import os

from pyglet.image.codecs.png import PNGImageEncoder

from micropsi_core.world.minecraft.vis.structs import block_names, load_textures, has_sides, solid_blocks
from micropsi_core.world.minecraft.vis.vertices import cube_vertices, cube_vertices_sides, cube_vertices_top, human_vertices
from micropsi_core.world.minecraft.vis.tex_coords import tex_coords, tex_coords_sides, tex_coords_top

import io

SECTOR_SIZE = 16

WINDOW = None

vis_counter = 0
image_counter = 0


if sys.version_info[0] >= 3:
    xrange = range

FACES = [ #TODO find out what this is used for
    ( 0, 1, 0),
    #( 0,-1, 0),
    #(-1, 0, 0),
    #( 1, 0, 0),
    #( 0, 0, 1),
    #( 0, 0,-1),
]

def normalize(position):
    x, y, z = position
    x, y, z = (int(round(x)), int(round(y)), int(round(z)))
    return (x, y, z)

def sectorize(position):
    x, y, z = normalize(position)
    x, y, z = x // SECTOR_SIZE, y // SECTOR_SIZE, z // SECTOR_SIZE
    return (x, 0, z)

class Model(object):
    def __init__(self, client):
        self.batch = pyglet.graphics.Batch()
        print(os.getcwd())
        load_textures(self) #load custom texture pack
        self.world = {}
        self.type = {}
        self.shown = {}
        self._shown = {}
        self.sectors = {}
        self.queue = []
        self.client = client # Minecraft client "spock"
        self.initialize()
        self.last_known_botblock = (0,0,0)

    def initialize(self):
        n = 16 #What exactly does this do?

        x_chunk = self.client.position['x'] // 16
        z_chunk = self.client.position['z'] // 16
        bot_block = [self.client.position['x'], self.client.position['y'], self.client.position['z']]
        current_column = self.client.world.columns[(x_chunk, z_chunk)]

        for y in xrange(0, n):
            current_section = current_column.chunks[int((bot_block[1] + y - 10 // 2) // 16)] #TODO explain formula
            if current_section != None:
                for x in xrange(0, n):
                    for z in xrange(0, n):
                        current_block = current_section['block_data'].get(x, int((bot_block[1] + y - 10 // 2) % 16), z) #TODO explain formula
                        if (current_block in solid_blocks and current_block in (2, 14, 46)):
                            self.init_block((x, y, z), tex_coords((0, 0), (0, 0), (0, 0)), block_names[str(current_block)])
                        self.add_block((0, 0, 0), tex_coords((0, 0), (0, 0), (0, 0)), "human" )

    def reload(self):
        n = 16 #What exactly does this do?

        x_chunk = self.client.position['x'] // 16
        z_chunk = self.client.position['z'] // 16

        bot_block = [self.client.position['x'], self.client.position['y'], self.client.position['z']]
        current_column = self.client.world.columns[(x_chunk, z_chunk)]

        for y in xrange(0, n):
            current_section = current_column.chunks[int((bot_block[1] + y - 10 // 2) // 16)] #TODO explain formula
            if current_section != None:
                for x in xrange(0, n):
                    for z in xrange(0, n):
                        current_block = current_section['block_data'].get(x, int((bot_block[1] + y - 10 // 2) % 16), z) #TODO explain formula
                        if (current_block in solid_blocks and current_block in (2, 14, 56)):
                            self.init_block((x, y, z), tex_coords((0, 0), (0, 0), (0, 0)), block_names[str(current_block)])
                        if [int(self.client.position['x'] % 16), int((bot_block[1] + y - 10 // 2) // 16), int(self.client.position['z'] % 16)] == [x,y,z]:  #TODO explain formula
                            self.remove_block(self.last_known_botblock)
                            self.add_block((x, y+1, z), tex_coords((0, 0), (0, 0), (0, 0)), "human" )
                            self.last_known_botblock = (x, y+1, z)

    def exposed(self, position):
        x, y, z = position
        for dx, dy, dz in FACES:
            if (x + dx, y + dy, z + dz) not in self.world:
                return True
        return False

    def init_block(self, position, texture, type):
        self.add_block(position, texture, type, False)

    def add_block(self, position, texture, type, sync=True):
        if position in self.world:
            self.remove_block(position, sync)
        self.type[position] = type
        self.world[position] = texture
        self.sectors.setdefault(sectorize(position), []).append(position)
        #if sync:
        #    if self.exposed(position): #TODO if this is active, only blocks on top get drawn. why?
        self.show_block(position)
        #    self.check_neighbors(position)

    def remove_block(self, position, sync=True):
        del self.world[position]
        self.sectors[sectorize(position)].remove(position)
        if sync:
            if position in self.shown:
                self.hide_block(position)
            self.check_neighbors(position)

    def check_neighbors(self, position):
        x, y, z = position
        for dx, dy, dz in FACES:
            key = (x + dx, y + dy, z + dz)
            if key not in self.world:
                continue
            if self.exposed(key):
                if key not in self.shown:
                    self.show_own_block(key)
            else:
                if key in self.shown:
                    self.hide_block(key)

    def show_blocks(self):
        for position in self.world:
            if position not in self.shown and self.exposed(position):
                self.show_own_block(position)

    def show_block(self, position, immediate=True):
        texture = self.world[position]
        self.shown[position] = texture
        if immediate:
            self._show_block(position, texture)
        else:
            self.enqueue(self._show_block, position, texture)

    def show_own_block(self, position, immediate=True):
        texture = self.world[position]
        self.shown[position] = texture
        if immediate:
            self._show_own_block(position, texture)
        else:
            self.enqueue(self._show_own_block, position, texture)

    def _show_block(self, position, texture):
        x, y, z = position

        if self.type[position] in has_sides: #TODO make smarter
            count = 4
            vertex_data = cube_vertices_top(x, y, z, 0.5)
            texture_data = list(tex_coords_top((0, 0), (0, 0), (0, 0)))
            self._shown[position] = self.batch.add(count, GL_QUADS, self.texturepack[self.type[position]],
                    ('v3f/static', vertex_data),
                    ('t2f/static', texture_data))

            vertex_data = cube_vertices_sides(x, y, z, 0.5)
            texture_data = list(tex_coords_sides((0, 0), (0, 0), (0, 0)))
            self._shown[position] = self.batch.add(16, GL_QUADS, self.side_files[self.type[position]],
                ('v3f/static', vertex_data),
                ('t2f/static', texture_data))

        if self.type[position] == "human":
            count = 24
            vertex_data = human_vertices(x, y, z, 0.5)
            texture_data = list(tex_coords((0, 0), (0, 0), (0, 0)))
            # create vertex list
            self._shown[position] = self.batch.add(count, GL_QUADS, self.texturepack[self.type[position]],
                    ('v3f/static', vertex_data),
                    ('t2f/static', texture_data))

        else:
            count = 24
            vertex_data = cube_vertices(x, y, z, 0.5)
            texture_data = list(tex_coords((0, 0), (0, 0), (0, 0)))
            # create vertex list
            self._shown[position] = self.batch.add(count, GL_QUADS, self.texturepack[self.type[position]],
                    ('v3f/static', vertex_data),
                    ('t2f/static', texture_data))

    def hide_block(self, position, immediate=True):
        self.shown.pop(position)
        if immediate:
            self._hide_block(position)
        else:
            self.enqueue(self._hide_block, position)

    def _hide_block(self, position):
        self._shown.pop(position).delete()

    def show_sector(self, sector):
        for position in self.sectors.get(sector, []):
            if position not in self.shown and self.exposed(position):
                self.show_block(position, False)

    def hide_sector(self, sector):
        for position in self.sectors.get(sector, []):
            if position in self.shown:
                self.hide_block(position, False)

    def change_sectors(self, before, after):
        before_set = set()
        after_set = set()
        pad = 4
        for dx in xrange(-pad, pad + 1):
            for dy in [0]: # xrange(-pad, pad + 1):
                for dz in xrange(-pad, pad + 1):
                    if dx ** 2 + dy ** 2 + dz ** 2 > (pad + 1) ** 2:
                        continue
                    if before:
                        x, y, z = before
                        before_set.add((x + dx, y + dy, z + dz))
                    if after:
                        x, y, z = after
                        after_set.add((x + dx, y + dy, z + dz))
        show = after_set - before_set
        hide = before_set - after_set
        for sector in show:
            self.show_sector(sector)
        for sector in hide:
            self.hide_sector(sector)

    def enqueue(self, func, *args):
        self.queue.append((func, args))

    def dequeue(self):
        func, args = self.queue.pop(0)
        func(*args)

    def process_queue(self):
        start = time.clock()
        while self.queue and time.clock() - start < 1 / 60.0:
            self.dequeue()

    def process_entire_queue(self):
        while self.queue:
            self.dequeue()

class Window(pyglet.window.Window):
    def __init__(self, client, *args, **kwargs):
        super(Window, self).__init__(*args, **kwargs)
        self.exclusive = False
        self.flying = True
        self.strafe = [0, 0]
        self.position = (0, 16, 16)
        self.rotation = (45, -45) # first left,right - second up,down
        self.sector = None
        self.reticle = None
        self.dy = 0
        self.num_keys = [
            key._1, key._2, key._3, key._4, key._5,
            key._6, key._7, key._8, key._9, key._0]
        self.client = client #Minecraft Client "spock"
        self.model = Model(self.client)
        self.label = pyglet.text.Label('', font_name='Arial', font_size=18, 
            x=10, y=self.height - 10, anchor_x='left', anchor_y='top', 
            color=(0, 0, 0, 255))
        pyglet.clock.schedule_interval(self.update, 1.0 / 60)

    def get_sight_vector(self):
        x, y = self.rotation
        m = math.cos(math.radians(y))
        dy = math.sin(math.radians(y))
        dx = math.cos(math.radians(x - 90)) * m
        dz = math.sin(math.radians(x - 90)) * m
        return (dx, dy, dz)

    def get_motion_vector(self):
        if any(self.strafe):
            x, y = self.rotation
            strafe = math.degrees(math.atan2(*self.strafe))
            if self.flying:
                m = math.cos(math.radians(y))
                dy = math.sin(math.radians(y))
                if self.strafe[1]:
                    dy = 0.0
                    m = 1
                if self.strafe[0] > 0:
                    dy *= -1
                dx = math.cos(math.radians(x + strafe)) * m
                dz = math.sin(math.radians(x + strafe)) * m
            else:
                dy = 0.0
                dx = math.cos(math.radians(x + strafe))
                dz = math.sin(math.radians(x + strafe))
        else:
            dy = 0.0
            dx = 0.0
            dz = 0.0
        return (dx, dy, dz)

    def update(self, dt):
        self.model.process_queue()
        sector = sectorize(self.position)
        if sector != self.sector:
            self.model.change_sectors(self.sector, sector)
            if self.sector is None:
                self.model.process_entire_queue()
            self.sector = sector
        m = 8
        dt = min(dt, 0.2)
        for _ in xrange(m):
            self._update(dt / m)

    def _update(self, dt):
        # walking
        speed = 15 if self.flying else 5
        d = dt * speed
        dx, dy, dz = self.get_motion_vector()
        dx, dy, dz = dx * d, dy * d, dz * d
        # gravity
        if not self.flying:
            self.dy -= dt * 0.00044 # g force, should be = jump_speed * 0.5 / max_jump_height
            self.dy = max(self.dy, -0.5) # terminal velocity
            dy += self.dy
        # collisions
        x, y, z = self.position
        x, y, z = self.collide((x + dx, y + dy, z + dz), 2)
        self.position = (x, y, z)

    def collide(self, position, height):
        pad = 0.25
        p = list(position)
        np = normalize(position)
        for face in FACES: # check all surrounding blocks
            for i in xrange(3): # check each dimension independently
                if not face[i]:
                    continue
                d = (p[i] - np[i]) * face[i]
                if d < pad:
                    continue
                for dy in xrange(height): # check each height
                    op = list(np)
                    op[1] -= dy
                    op[i] += face[i]
                    op = tuple(op)
                    if op not in self.model.world:
                        continue
                    p[i] -= (d - pad) * face[i]
                    if face == (0, -1, 0) or face == (0, 1, 0):
                        self.dy = 0
                    break
        return tuple(p)

    def set_2d(self):
        width, height = self.get_size()
        glDisable(GL_DEPTH_TEST)
        glViewport(0, 0, width, height)
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        glOrtho(0, width, 0, height, -1, 1)
        glMatrixMode(GL_MODELVIEW)
        glLoadIdentity()

    def set_3d(self):
        width, height = self.get_size()
        glEnable(GL_DEPTH_TEST)
        glViewport(0, 0, width, height)
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluPerspective(65.0, width / float(height), 0.1, 60.0)
        glMatrixMode(GL_MODELVIEW)
        glLoadIdentity()
        x, y = self.rotation
        glRotatef(x, 0, 1, 0)
        glRotatef(-y, math.cos(math.radians(x)), 0, math.sin(math.radians(x)))
        x, y, z = self.position
        glTranslatef(-x, -y, -z)

    def on_draw(self):
        self.clear()
        self.set_3d()
        glColor3d(1, 1, 1)
        self.model.batch.draw()
        self.set_2d()
        self.draw_label()

    def draw_label(self):
        x, y, z = self.position
        global vis_counter
        self.label.text = 'i=%d %02d (%.2f, %.2f, %.2f) %d / %d i=%d' % (vis_counter,
            pyglet.clock.get_fps(), x, y, z, 
            len(self.model._shown), len(self.model.world), vis_counter)
        vis_counter += 1
        self.label.draw()

class MinecraftVisualisation:
    def __init__(self, minecraftClient):
        self.minecraftClient = minecraftClient

    def setup(self):
        glClearColor(0.5, 0.69, 1.0, 1)
        glEnable(GL_CULL_FACE)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)

    def commence_vis(self):
        global window
        window = Window(self.minecraftClient, width=400, height=300, caption='Pyglet', resizable=True, visible=False)
        self.setup()
        for i in range(0,3): #TODO make smarter
            self.advanceVisualisation()

    def advanceVisualisation(self):
        pyglet.clock.tick()
        #pyglet.image.get_buffer_manager().get_color_buffer().save('./micropsi_server/static/minecraft/screenshot_write.png')
        #move('./micropsi_server/static/minecraft/screenshot_write.png', './micropsi_server/static/minecraft/screenshot.png')
        #output = io.StringIO()
        #output.close()
        #output = io.StringIO()
        #the_image = pyglet.image.get_buffer_manager().get_color_buffer().get_image_data()
        #output = io.StringIO()

        #raw_out = io.FileIO(kitten, mode='r', closefd=True)
        #output = open(output1)


        #img = pyglet.image.get_buffer_manager().get_color_buffer()
        #file = io.StringIO()
        #img.save('buffer.png', file)
        #output = file.getvalue()
        #print("vis, file is = ", file)
        #file.close()

        #output.close()
        global image_counter
        image_counter += 1
        #if image_counter == 15:
            #output = open('screenshot8.png', 'w+b')
        output = io.BytesIO()
        pyglet.image.get_buffer_manager().get_color_buffer().save(file=output)

        #    target = open('my_new_png_out_c.png', 'wb')
        #    #kbytes = b'\x89\x50\x4E\x47\x0D\x0A\x1A\x0A\x00\x00\x00\x0D\x49\x48\x44\x52\x00\x00\x00\x50\x00\x00\x00\x3C\x08\x06\x00\x00\x00\xF1\x27\x3D\x8C\x00\x00\x19\x6D\x49\x44\x41\x54\x78\x9C\xED\x9B\x79\x94\x55\xC5\xD9\xEE\x7F\x55\x7B\x3C\xA7\xE7\x09\x04\x04\x5A\x1A\x90\x41\x64\x10\x05\x91\x30\x38\x0F\xD7\x10\x83\x23\x04\xC5\x68\xA2\xD1\x90\x44\x33\x7D\xF9\xCC\x97\xF8\xE5\x66\x30\x9A\x9B\x9B\xC1\x38\x6B\xE2\x10\x0D\x68\x8C\x18\xE3\x10\xD1\x48\x10\x07\x54\x40\x10\x81\x06\x64\x1E\xBA\x69\x7A\x3E\xC3\x9E\xAA\xEE\x1F\x75\xBA\x97\xE6\x13\x93\xB6\x71\x65\xDD\xB5\x78\xFF\x69\xD6\x3E\xEC\x73\xEA\x7D\xF6\x53\xF5\x3E\xEF\x53\xB5\xC5\xF7\x9F\xD0\x9A\xC3\xF1\xB1\x43\xFE\xBB\x07\xF0\xFF\x7B\x1C\x06\xB0\x97\x71\x18\xC0\x5E\xC6\x61\x00\x7B\x19\x87\x01\xEC\x65\x1C\x06\xB0\x97\x71\x18\xC0\x5E\xC6\x61\x00\x7B\x19\x87\x01\xEC\x65\x1C\x06\xB0\x97\x71\x18\xC0\x5E\xC6\x61\x00\x7B\x19\xF6\xBF\x7B\x00\x1F\x16\x47\xE7\xEE\x27\xDB\xD6\x88\x57\x5C\xC3\xE6\xE2\xF9\xFF\xEE\xE1\x7C\x64\xF4\x8A\x81\x99\xB6\xC6\xA6\x3D\x9B\xDF\x5C\x1F\xE6\x3A\x3A\x7B\x7A\x6F\x6B\xC3\xD6\x9D\x3B\xD6\xBF\xBC\xE6\xFD\xD7\x46\xBF\x51\x4E\xD5\xCE\x5B\x08\x82\x90\x6C\xE4\xB2\xBF\x69\x3F\xB5\xAD\x77\x33\xFA\x8D\xF2\x83\x7E\xCF\xB6\xB5\x7F\x5B\xFD\xCA\x13\x3F\x5B\xAA\x55\x92\x1C\xEA\x31\xFE\x2B\xDF\xF7\xB1\x18\xB8\x6B\xE3\x6B\xEF\x3C\x7B\xCF\x57\xC5\xEE\x4D\x2B\x46\x03\xD5\x42\x48\xD5\x67\xF0\x98\xFA\xD3\xE6\xDF\xDC\x51\x37\xEE\xF4\xE3\xFE\xD9\xFD\x6D\xFB\x77\xEC\xB9\xE7\x5B\x93\x53\x71\x94\x2F\xFF\xF1\x0F\xFF\x8B\x09\xD9\x9F\xB1\xC2\xBA\x82\xF5\xFE\xF5\xF8\x9D\xAD\x5C\x7E\x71\x27\x77\x3C\xE8\xD3\x77\xCB\x0D\x4C\x3D\xEF\x2B\x3C\xDA\xF8\x9F\x4C\xE4\x77\x2C\x59\xF2\x1C\xB5\x43\x8F\xA7\xB5\xF6\x7A\x93\x4C\x6B\xC3\xFE\x45\x3F\x3D\x7F\xF0\x98\xE9\x73\xD6\x0A\x69\x59\x87\x72\x8C\xFF\x6A\xCE\xA2\xA7\x7E\xE0\xEE\x4D\x2B\xD6\xDD\xFF\xDD\x99\x47\x45\x41\x36\x3D\x70\xC4\x94\xB5\x03\x86\x4F\x6A\x6E\xD8\xB6\xA6\x74\xEB\xDA\x17\xC7\x59\x96\x13\xCD\xFE\xFA\xC3\x2B\x47\x9E\x38\x7B\xF2\xC1\xEE\x8F\x82\x6C\xF6\xBE\xEF\x4C\xDD\xB1\xEF\xBD\x55\x23\x52\xE9\x54\xC7\x9E\x47\xC7\x94\xFC\xB6\xFE\x22\xAA\x2B\x1C\x32\x79\x87\xAB\xAF\xAA\xE0\x91\x45\x31\x7B\x77\xEF\x25\x95\x4A\x33\xAA\x68\x09\xAB\x9A\xA7\x72\xF2\xA7\x46\xB3\x64\xE9\x5A\x46\x0E\x3F\x82\xD3\xCF\x74\x79\xF8\x91\x1C\x37\xDD\xFE\xD4\x6B\x5B\x56\x3F\x3F\xEA\xAB\x77\x6E\x89\x53\x25\x55\x95\x87\x6A\x8C\x3D\xC9\xB9\x67\x0C\xD4\x5A\x3F\xF1\xCB\xF9\xA9\x28\xC8\xA6\xA7\xCE\xFE\x8F\x97\x4E\x99\xF7\x93\x19\x5D\x1F\xAD\x5A\x72\xDF\xCB\x4F\xFE\xE6\xCA\x93\x16\xFF\xFA\xF3\xA3\xEB\xC6\x9F\x91\x71\xFD\xE2\xA2\x7F\xBC\xBD\x61\xDB\xDB\xF5\x2B\x1E\xF8\xB4\xDA\xF7\xDE\x8E\x11\x00\x5A\x69\x96\x67\x4F\x65\xC4\xF0\x6A\xDA\x5B\x3B\xE9\xCC\x26\x4C\x9D\x73\x1B\x37\xFC\xEA\x6F\x1C\xF8\xC3\xAD\xD8\xC7\x5D\xC0\x8D\xB7\x3F\xCE\x45\x93\x52\xF4\xCD\xFD\x94\x2B\x4E\x3F\x87\x1F\xFD\x76\x39\xDB\x77\x1D\xCB\xC0\x23\xB7\xBE\xF1\xEE\x2B\x8F\x4D\x16\x23\x8E\x7B\xE9\xC1\x05\x83\x66\xEC\x6D\xCD\x1A\x32\xF4\x72\x8C\x3D\xCD\xB9\x47\x6B\x60\xFD\x5B\x7F\x79\xB3\x69\xD7\xFA\x21\x5E\xBA\xAC\x7D\xFA\x45\xDF\xFF\xC0\x13\x1C\x7F\xEA\xE7\xA7\xD6\x1E\x33\xE3\xED\x20\xDB\x5E\xB2\xE6\xA5\x87\xDE\x7A\xFF\x67\x7D\xF7\xFC\x26\xD8\x7F\x6F\xD9\x4B\x77\x5D\x3F\x61\xC8\xCA\x95\x3B\x46\x54\xD7\x54\xEF\x04\x10\x42\x73\xCE\xF9\x53\xB9\xF9\xB1\x07\xB8\xF5\x99\x47\x59\xB8\xE2\x71\x2C\xC7\x62\xCB\xC2\x5B\xA9\xE9\xD3\x07\xBD\xFA\x8F\x08\x29\x79\x78\xF9\xA3\xCC\x7B\xD8\x67\xD1\xAB\xC5\x8C\x2F\x7F\x93\xAB\xCF\x7A\x95\x2F\x2F\x78\xD4\x07\x62\xBD\xE1\xAD\x53\xF6\xB6\x66\x45\x6F\xC7\xF8\x71\x73\xEE\x11\x80\xEF\xAD\x7E\x3E\x0B\x30\x7A\xEA\x85\x6F\xDB\xAE\xEF\xFF\xE3\xE7\x63\xA6\xCD\xE9\x00\x58\xF5\xC2\x7D\xD5\x00\x47\xB5\xDE\x4D\xBF\x5D\xDF\x67\xC9\x0B\x4B\xDE\xB8\xED\xCF\xED\x33\xB4\xD6\xF2\x33\xB3\xCE\x7C\x69\xDE\x45\x67\xE4\x00\xA2\x38\xD1\xD3\x2F\xBD\x05\x95\x28\xDC\x94\x8B\x10\x82\x38\x8C\x59\xF8\xDA\x9F\xB8\xE3\xD9\x7B\xF9\xFD\xF2\x47\x89\xF2\x21\x42\x0A\xE2\x20\xE2\x0F\x2B\xFE\xC8\x1D\x9B\x4A\xF8\xFA\xAF\xAA\xDE\xD9\xB6\x75\xDB\x98\x8A\x51\xD6\xBA\xD3\x1E\x2D\xE9\x2E\x1E\x43\x3B\xEF\xE3\xDD\x27\xBF\xD5\xA3\x31\xF6\x36\xE7\x1E\x4D\xE1\x5D\xF5\xAF\x57\x03\x0C\x18\x7A\xFC\x87\x7E\x3E\x60\xD8\x09\x7D\x01\x1A\xB7\xAE\xAA\x5B\x75\xEF\x29\xC9\xA0\xCF\x5C\x60\x35\xB5\x3B\xB8\x9E\xCB\xD4\x93\x4E\x78\xF5\xB4\xD3\xA6\x55\x55\x54\x0D\x98\xF1\xE0\x8B\x0B\xB7\x74\xDD\x13\x85\x31\x6E\xCA\x25\x89\x12\x54\x92\xE0\x17\xFB\x84\xB9\x10\xCB\xB1\x10\x89\xC0\x4B\x7B\xE4\x3B\x73\x68\x25\x41\x6B\xE2\x30\xE6\xC1\x3F\x3E\xDC\x06\xD0\xEA\x9C\xD8\xB6\x64\xCB\x55\xA4\x67\xFF\x59\xFF\xFC\xB4\x19\xD8\x52\xD2\xDA\x96\xA9\x06\x38\xBA\x72\xD7\x47\x8E\xB1\x61\xDB\x9A\x3A\xAD\x92\xE4\x1F\x8B\x4F\x4F\x73\xEE\x11\x80\x1D\x07\x76\x57\x02\xA4\x4B\xAB\xDD\x0F\xFB\xFC\xF2\x13\xD6\x97\xDC\x01\xC4\x71\xEC\x8D\x19\x3F\x69\x6F\x9C\xA8\x7E\xE3\xAB\x37\x33\xF3\xEA\x4B\xA6\x2C\x5F\xB1\x51\x3E\xBD\xEE\x79\xC2\x0D\x2B\x88\x83\xD8\xDC\x20\x20\x5D\x96\x22\xCC\x86\x86\x85\x69\x0F\x95\x28\x2C\xC7\x22\xE8\xCC\x83\x80\x20\x9B\xC7\x76\x6C\x1C\xDF\x21\xC8\xE4\x01\x74\xDB\xBE\xD6\x11\x00\x83\x9A\x06\x0E\x99\xFC\xD7\xDF\xB2\xEA\xBD\xE1\x1C\xF5\xC5\x2A\x4A\x7D\x9B\xB6\xB6\xF6\x4A\x80\x81\x83\x86\xB9\xEE\xBA\x1F\x30\x65\x4C\x9E\xFA\x7D\x83\xD8\xD3\xE7\x6A\x00\x52\x25\x95\x25\x00\x49\x14\x78\x1D\x2D\x7B\xF7\x96\x56\x1D\xD9\xAF\x37\x39\xF7\x68\x0A\xE7\xB3\x6D\x25\x66\x10\x55\xDD\x54\xAE\x6D\xBD\x8F\x6B\xE2\xD1\x0C\x6A\xBE\x8B\xD2\x8D\xDF\x2B\xEB\xBA\x3E\x6B\xD4\xB2\xBC\x8C\xDF\x63\xA7\x9A\xC8\x7F\xDE\x77\xAB\x7C\x72\xD5\xB3\xC4\x51\x82\x56\x0A\xDB\x29\x3C\x74\x0D\x61\x2E\xC2\xF1\x1D\x34\x90\xEF\xCC\x01\x60\xBB\x0E\xC2\x92\x68\xA5\x49\x15\xA7\x88\xC3\x98\x4C\x73\x27\xD2\xB2\x08\x32\xF9\x4D\x61\x3E\xAC\x12\x42\xC4\x47\x9D\xB9\xBF\xDF\xC2\x17\x5F\x14\xFD\xA6\xD7\xF3\xC3\x07\x6F\x67\x6D\x7D\x03\xF9\x7C\xBE\x04\x20\x8C\x12\x7F\xE4\xC8\x3A\xB6\xAD\x78\x8E\x09\xE3\x86\x52\xD7\xFA\x6B\x2A\x77\xFD\x8C\x54\x71\x65\xF7\x18\xA3\xBC\x79\x22\x3D\xCD\xF9\xFD\xD1\x23\x06\x46\x41\x36\x05\xE0\x17\x95\xA7\x06\x1D\xB8\x83\x28\x86\xB3\x87\x3D\xC4\xE2\xCD\x5F\xA0\xBD\xA3\x9D\xD5\xFD\xBF\x93\xB6\xAC\x2B\x92\x24\x51\xD6\x1F\xFE\xDC\x1C\xAD\x4E\xAF\x05\xD6\x92\x44\x31\x52\x4A\xDC\x22\x8F\x20\x13\x10\x05\xA1\xF9\x42\x01\x68\x4D\x12\x27\x14\x95\x15\x91\xEB\xC8\x12\x47\x09\x49\x94\xE0\xA4\x5C\xE2\x00\xE2\x30\x26\x55\x96\x26\x09\x63\xA2\x20\x24\xD7\x99\xDF\x0F\x0C\x77\xD3\x5E\xA3\x8A\x54\xFF\x53\xAE\x3A\x43\x0B\x29\xC8\xB5\x65\x59\xF4\xD6\x93\x04\x41\x90\x02\x28\x2A\x2A\x49\x7D\x66\xE4\xB3\xA8\x4F\x5F\xC7\x63\x8B\x76\x13\xEB\x14\x53\x92\x5F\xF1\xFC\xD6\x30\x2D\x84\x48\xB4\xD6\x56\x1C\xE5\xA3\x9E\xE4\xFC\x61\x9F\xF7\x88\x81\x45\x65\x35\x07\x00\xF6\xBF\xF4\xF5\xE0\xF9\x7B\xBE\x45\x67\xB6\x9D\xC5\x5B\xE6\xD1\xBF\x62\x3F\x23\xDB\xBE\xC7\xDE\x7D\x07\x72\x49\xA2\x2C\x80\x65\xB9\x32\x4F\x25\x8A\x24\x4A\xF0\x8B\x53\x58\xAE\x4D\xAE\x2D\x8B\x90\x02\xF1\xBE\x65\x47\x6B\x88\x82\x88\x5C\x47\x16\xA5\x14\x7E\xB1\x0F\x42\x10\xE5\xC2\x0F\xFE\xB8\x10\xD8\xAE\x43\xD0\x99\x8F\x01\xBC\x22\xEF\x00\x68\xC2\x6C\x40\x98\x09\x10\x52\x90\xEF\xC8\xE1\xF8\xCE\x01\x80\xE7\xD7\x2D\x0D\xEE\x5C\x3A\x89\x45\x8B\x32\x54\x6C\xB8\x06\xB6\x2F\xE2\x4D\xEF\x7A\xFA\xF5\xA9\xCE\x69\xAD\x2D\x80\x8A\xC6\x47\xBC\x7F\x35\xE7\x30\xD7\x11\xF4\x0A\xC0\x1B\x67\x3D\xCF\xF0\x5A\xD9\x0C\x50\x7D\x44\x5D\xEE\x98\x63\x8F\x62\x60\xBF\x6A\x66\x7E\x6A\x0C\x8F\xFC\xE2\x27\xEC\xAF\xBB\x85\x85\xCB\xFF\xD4\xD6\xF5\xFF\x6D\x4B\x16\x09\x29\x10\x02\x72\xED\x59\x00\x1C\xDF\x45\x2B\x0D\x89\x2A\xA0\x07\x42\x02\x08\xD2\x65\x45\xB8\x29\x8F\x5C\x5B\x16\x37\xE5\xE2\x16\x79\x68\x6D\x80\xEB\xAA\xCE\xE6\x6F\xA4\x01\xBC\xB4\xDF\xA9\x62\x05\x08\xDC\xB4\x87\x65\xDB\x08\x21\xF0\x8A\xFC\x66\x80\x6C\x47\x36\xB7\xE8\xCD\x27\xB9\xE3\xB9\x45\x6C\xE9\x77\x0B\x4E\xDC\x86\x25\x35\x99\x8E\x5D\xDD\x63\x5C\xB5\xE2\x99\x22\xFD\xFA\x15\x8C\xC8\xDE\x7F\xD0\xBC\x4B\x2A\xFB\x37\x03\xE4\x3A\x9B\x73\x3D\x06\xB0\xAE\xF5\x6E\xFE\x6B\xC6\x0D\xDC\x30\xE0\x6C\x7E\x7D\xEB\xBB\xC4\x49\x55\x07\xC0\xE4\x49\x76\xD8\x7F\xF2\x97\xC9\xE5\x5A\xF9\xFB\xF2\xD5\x6C\xAF\x9D\xC6\xBD\x4B\xFE\x88\x4A\x92\x0E\x00\x69\xC9\xBC\x74\xED\xF2\x20\x93\x47\x6B\xB0\x3D\x87\x28\x88\xD0\x68\x84\x14\x28\x5D\x00\x50\x80\x10\x02\xCB\x92\x64\xDB\xB3\x68\xA5\xD1\x5A\x13\xE6\x42\xF2\x1D\x39\x52\x25\x29\x82\xCE\x3C\x61\x2E\x34\x54\x45\x63\x39\x5D\xAB\x8E\x16\x96\x63\xA1\x95\x22\xCC\x86\x08\x01\xB6\x6B\xE3\xF8\x4E\x07\x80\x8A\x55\x18\x66\x02\x54\x9C\xF0\xD0\xD2\x3F\xF0\xC0\x81\x2A\x2A\x2A\xCB\xB1\x37\xDD\xDC\x01\xE0\xBA\x6E\xFE\x91\xDF\xCE\x2E\xAF\x3A\x62\x0C\x51\x9C\x70\xE3\xD4\x6F\x32\x72\xD3\xB9\x0C\x6C\xBA\xFB\x83\x00\x56\xF4\xEF\x00\xC8\x75\x34\xFF\xC3\x94\xF8\x08\x00\xFB\x37\xFE\x86\xA3\x3B\xEF\xA5\xBC\xC2\xC6\x6A\x69\xE0\xAE\xD7\xCF\xC4\xF3\x1C\x2A\x2A\xCA\x73\x00\xAB\x56\x6D\x4C\xC2\x20\xE6\x9E\x25\x4F\xF2\xBB\x97\x1E\x43\x08\x81\x94\x82\x96\x3D\xCD\x0D\x00\x25\xD5\xA5\x9B\x2D\x4B\xDA\x5D\xC9\xDA\xAE\x8D\xD6\x1A\x15\x2B\x53\x51\x3D\x53\xD0\xB4\x06\x2F\xED\x15\x0A\x86\x22\xCC\x06\xA4\x4A\xD3\x05\x7C\xA0\xB3\xB9\x83\x54\x69\x0A\x21\x04\x2A\x51\x84\xF9\x08\xDB\xB5\x6D\x80\x30\x1B\xA4\x10\x02\xA3\x42\x34\x61\x3E\x22\x89\x13\x52\xA5\xE9\x1C\x40\xEB\xBE\x96\xC4\xF6\x6C\xDC\xB4\x87\xB4\x24\x41\x2E\xE0\xF6\x67\xEF\xE7\x97\x6B\x86\x36\x00\x54\x56\x14\x6F\x7E\xFC\xEE\x25\xB6\xE3\x4A\xCA\x3B\x9F\xE6\x17\x0F\xF5\xA3\x2D\x35\x92\xCE\x4C\x27\xDF\x2C\x3A\x8B\x54\xFD\x8F\x01\x28\xAB\x19\x94\x03\xD8\xFB\xDE\xCA\x0F\x35\x2B\x3E\x00\x60\x7A\xF3\x4D\x8C\xCC\xDC\xC6\x98\xF8\x11\xFA\xF4\xAD\xA2\x61\x7F\xC4\x53\xCF\x85\x5C\x7D\x75\x7F\xC6\x1F\x53\xCD\x29\x27\xCF\xA8\x02\xB8\xE3\xEE\xBF\x8F\x7A\x68\xD9\xC2\xC4\xF1\xDD\x6E\x56\x28\xA5\x38\xB0\xB3\x29\x0D\x50\xD1\xAF\xB2\x49\x5A\x12\x29\x25\x49\x1C\x93\x44\x09\x96\x25\x91\x96\x24\xCA\x87\x24\x91\x19\x8B\x10\x90\xCF\xE4\x11\x42\xE0\x78\x0E\x6E\x91\x47\x14\x44\x58\x8E\x85\x57\xE4\xE3\x97\xA4\x90\xB6\x85\x10\x02\xBF\xD8\x27\x55\x92\x22\x55\x9A\xF6\x01\xA2\x20\x2A\xB1\x5C\xAB\xBB\x82\x3B\x9E\x83\xE5\xD8\xF4\x19\xDC\xA7\x0A\xA0\x69\x5B\xE3\x28\xDB\xB5\x93\x28\x5F\xD0\x94\x85\xE5\x62\x6F\xFD\x9E\x34\x80\xD7\xB7\xB4\xA9\x21\x7D\x3A\xC5\x45\x29\x2A\x5A\x9F\x67\xDE\xCC\x1D\xC4\x72\x30\x02\x81\x37\xED\x02\xCA\x8A\x14\x6A\xC5\x15\x8C\x3D\xF9\xB2\x2A\x80\x77\x5E\x5E\x38\xEA\xC3\x1C\x9F\x0F\x00\x98\x1D\xFA\x1F\xEC\xDD\x1F\x30\xAA\x4E\x70\x4C\xFE\x3B\x2C\xFE\xC5\x97\xD8\xC5\x64\x2C\x2B\x60\xE5\x9A\x06\x9E\xDB\xB8\x74\x74\x59\x9F\xF2\x35\x61\x2E\xAC\xD9\xB6\x7A\xEB\xB2\x28\x88\x10\x42\xA0\x95\x62\xFF\xD6\xC6\x57\x5B\xF6\xB6\x8C\x93\x96\x0C\x8E\x18\xD6\x7F\x54\x14\x44\x68\xAD\x71\x7D\x97\x24\x8A\x51\x89\x42\x27\x0A\xDB\xB5\x49\xBA\xC6\xA1\x41\x5A\x16\x2A\x4E\x50\x89\x32\x85\x43\x6B\x92\x28\x26\x8E\x62\xB2\xAD\x19\xC2\x5C\x40\x1C\x45\x80\xA9\xB4\x7E\xB1\x37\x44\x08\x91\x64\xDB\x73\xB5\x99\x03\x1D\xED\x41\x36\x00\xA5\x41\x6B\x82\x4C\x9E\xD2\xBE\x65\xA3\x4B\xFB\x94\xAD\x09\xF3\x61\x4D\xFD\x2B\x1B\x97\x99\x52\x2F\x48\x12\x45\xE3\xD6\xC6\x57\x5B\x1B\xCC\x18\x07\x8C\x1A\x38\xEA\xD9\xF5\x2F\x72\xFB\x53\x0F\xB0\xA1\xE6\x47\x3C\x74\xDF\xD2\xD7\xD6\xFD\xFD\xCE\x65\x43\xAD\x87\xD7\xD6\x6F\x1C\x4A\xAC\x4B\xB9\xFE\x92\x22\x06\x0C\x3B\x61\xF4\xA0\x91\x53\xD7\x64\x5A\x1B\x6A\xFE\xF6\xF0\xF7\x96\xBD\x1F\xAF\x75\x2F\x2F\x7C\xF5\x7F\xC8\x98\xD6\xDA\xEB\x68\xD8\x75\x27\x83\x2F\xF9\x0A\xA7\x5F\x15\x31\xFF\xB2\x98\x19\xF3\xEF\x23\xCC\x87\xB8\x29\x97\xC1\x63\x6B\xD5\x3B\x2F\xAE\xC9\xED\x5A\xB7\x63\x46\x47\x53\xFB\xDB\x65\x47\x94\xB7\x64\x5B\x33\xA9\xA6\x1D\x4D\x93\xD0\x5A\x0E\x9D\x3C\xE2\x75\x37\xE5\x4E\xD3\xCA\xAC\x73\x42\x4A\x2C\xD7\x22\xCA\x45\x28\x14\x24\x02\xD7\x73\xCC\x8F\x15\xD6\x40\xAF\xC8\x27\x0A\x22\x10\x02\x6D\x2A\x07\x96\x25\x4D\xC5\x16\x02\xAD\x21\x8E\x62\xA4\x63\x61\xB9\x56\x65\x49\x4D\xE9\x9A\xF6\xC6\xB6\x63\xF3\x1D\x41\xBD\x93\xF2\x26\x0A\x21\xD0\x80\xED\xD8\xA8\x44\x33\x6C\xF2\xD1\x6A\xD5\xD3\x6F\xE6\x76\xBE\xB3\x7D\x46\x7B\x63\xDB\xDB\x65\xFD\xCA\x5B\x72\x6D\xB9\xD4\xFE\xED\x8D\x93\xD0\xC8\xBA\x13\x86\xBF\x5E\x52\x5D\x3A\x2D\xC8\x04\x48\x5B\xF1\xE0\xB2\xC7\xD9\xB4\xA4\xA1\x72\xEF\x9E\xBD\xC3\xD7\xEC\x9E\xF2\xF7\x51\x4F\xCD\x62\xCA\x25\x3F\xE7\x17\x5B\x7E\x05\xC0\xCC\xB9\xFF\x5B\xFD\xFE\x07\x67\xE7\x96\x3D\xF6\xE3\x19\x3B\xD6\x2F\x7F\x7B\xF0\xE8\x69\x2D\x8D\x3B\xDE\x49\x6D\x7C\x7D\xF1\xA4\x0F\xD5\x81\xCF\x65\xBF\xC4\x82\x94\xC5\x11\xF9\xC5\xF8\xDE\x7C\xCE\x3F\x7E\x16\x0B\x5F\xFB\x13\x2A\x51\x54\x0E\xAC\x1E\x37\xFE\x9C\x89\x1B\xD7\xFF\x7D\x9D\xD5\xD6\xD0\x3A\xB6\xAD\xA1\x15\x00\x37\xE5\x36\xD4\x4E\xA8\xDB\xD4\xA7\xB6\xCF\x34\xDB\xB5\x89\x82\x10\xAD\x4C\x41\xB0\x5D\x1B\xAF\xD8\x27\xC8\x04\x08\x61\xDA\xB7\x2E\x06\xC6\x61\x6C\x48\x82\x59\x2B\xA3\x5C\x88\xB4\x24\xDA\xB1\x90\x96\x44\x29\x6D\x0A\x84\x63\xA3\x1D\x4D\xD0\x99\xA7\x7A\x60\x4D\x4B\x7B\x63\x1B\x2D\xFB\x9A\x33\x25\x35\x25\x68\x69\x00\x57\x3A\x41\x2B\x8D\x5F\xEC\x8F\x1B\x77\xC6\x84\x8D\x1B\x5F\xD9\x60\xB5\x35\xB6\x8E\x6D\x6B\x34\x63\xF4\xD2\x5E\x43\xED\x84\xBA\x4D\x35\x83\x6B\xA6\xE5\xDA\x73\x48\x5B\xE2\x17\x7B\x9C\x32\x64\x3A\xAD\xAB\x37\xB1\x77\x0F\x8C\x1D\xDA\x4A\xFF\xE1\x5F\x67\x6B\xD9\xE5\xDD\x78\xD4\x1E\x33\x63\xDC\x15\x3F\x7D\x65\xE3\xE3\xFF\xF7\x73\xD6\xF6\x75\x4B\xC7\x6E\x5F\xB7\x14\x80\xE2\x8A\x7E\x0D\x07\xF5\x03\x07\x34\xDE\x46\x49\x71\x9A\x28\x8E\xB8\xEF\xCE\x9B\xB8\xF2\x9A\x1B\xB8\xEB\xB9\x87\x70\x3C\xC7\xB0\x31\xED\x91\x6B\xCD\xB6\xE4\x3A\x73\x3B\xA4\x14\x25\xA5\x35\x65\x03\x55\xA2\x9C\x24\x51\x38\x9E\x8D\x8A\x15\x96\x6B\x13\x07\x11\x96\x63\x17\x4C\x01\x89\x4A\x12\xA4\x65\x21\x04\x48\x4B\x22\x2D\x8B\x30\x08\xB1\x2D\x8B\x24\x4E\xB0\x5C\x1B\x15\x27\x48\xDB\x4C\x6D\xAD\x35\x2A\x51\x08\x29\xF1\x0B\x4C\xD5\x4A\xB5\xBE\xBA\xF0\x65\x25\x2C\x19\x9D\x78\xE1\xD4\x2A\xD0\xB6\x10\x82\x30\x1F\x62\xD9\x36\x52\x0A\xC3\x58\xF3\x00\x5A\x32\xCD\x1D\x3B\xBC\xB4\x5F\xE2\xF8\xEE\x40\xDB\xB1\x1C\xA4\x00\x43\x74\xCE\x1E\x75\x2A\x67\x0D\xDF\xC9\x77\xEF\xD9\xC0\xF1\x93\xA7\x73\xD4\xA0\xBE\xD4\x17\x7F\xF1\xC3\x20\x01\x20\xD7\xD9\xDC\xD2\xB8\xFD\x9D\x1D\x45\x65\x7D\x4A\x2A\xFB\xD5\x0D\x3C\xA8\x8C\xD9\xDD\xE7\x1A\xA6\x9C\x38\x86\xDD\xBB\xEA\x79\xE1\xA1\x69\x34\x37\x77\x30\x6B\xDC\x59\x04\x59\x53\x04\xA4\x94\xD8\xBE\x53\x51\xDE\xB7\x7C\xAC\x5F\x92\x1E\x12\x47\x89\x23\xA4\x40\x2B\x4D\x94\x8F\xD0\xDA\x4C\x4F\x69\x59\xA6\x68\x08\x81\xEB\x9B\x85\xBE\x0B\x14\x30\x0C\xB4\x2C\xCB\x74\x20\xB1\xC2\xF6\xEC\x6E\x46\x26\xB1\x02\x6D\x0A\x84\x56\x9A\x7C\x47\x0E\xAD\x34\x4E\xCA\x2D\xAF\x1D\x3F\xE4\x9D\x30\x1B\xF4\xDD\xBF\xAD\x61\xA5\xED\xD8\x28\xA5\x91\x96\x91\x35\x42\x0A\xA4\x6D\x15\x2A\x34\x15\xE9\xF2\xE2\xB1\x25\x35\xA5\x43\xA4\x25\x1C\x04\xC4\x41\x44\x1C\xC5\xA0\x34\x96\x94\xDC\x74\xCB\x9D\x5C\x3A\x6F\x2E\x37\x7C\x67\x3C\x97\x5C\xDC\x72\x50\xF0\x00\x52\xC5\x95\x15\x83\x47\x4F\x1B\x5B\x7D\xE4\x88\x21\xD2\x72\x9C\x8F\xD4\x81\x8F\xFD\xE9\x6F\x38\x7E\x0D\xB7\xDE\xBE\x89\x05\x5F\xAE\x60\x72\xCD\x0A\x28\x30\x27\xCC\x85\x48\x29\x10\x96\xC4\x2B\xF6\xCC\xA0\xC2\x18\x2F\x6D\x04\xB0\x52\x09\x61\x2E\x44\x25\x09\x4E\xCA\x41\x08\x41\xB6\x2D\x0B\x4A\xE3\xA6\x8C\xA0\x8E\xC3\x98\x38\x8C\x51\x71\x82\x57\xE4\x21\x6D\x49\x67\x53\x47\x41\x60\x9B\xE2\xA4\x94\x22\xCA\x47\x08\xC0\x2B\xF1\x51\x4A\x91\x6B\xCD\xD2\x6F\x78\xFF\x29\x45\x15\xC5\x5B\x76\xAF\xDF\xE5\x04\xD9\xC0\x3C\xB4\x44\xE1\xF8\x2E\x71\x10\x77\x77\x32\x5E\xCA\x34\x1B\xF9\x8E\x1C\x51\x10\x13\xE5\x23\xA4\x25\x11\x02\x4E\x2F\x6A\xE1\xFA\xEB\x06\xF3\xC0\x4B\x0F\xB0\x6F\x7F\x96\xDB\x6E\xDB\xCA\x7F\x3F\xF5\xED\x8F\x04\xF0\x1F\xE3\x23\x01\x6C\x1F\xF2\x0D\x6A\xAA\xCA\xD9\xA7\x6A\xB9\xEA\xEC\x6B\x58\xDD\x31\x8D\xCB\x67\x5E\xD2\x5D\x39\x85\x25\x49\xA2\x84\x30\x13\xE0\xFA\x2E\x4E\xCA\x45\x25\x89\xD1\x76\xA2\x40\x23\xA3\x7F\x09\x73\x01\xB6\x67\x4C\x82\x28\x17\xE2\x15\xFB\x20\xC0\x72\x8C\x14\x09\x73\x21\x71\x3E\xC2\x4B\x7B\x24\x71\x42\x1C\x44\x78\x45\x3E\x42\x4A\x23\x90\xD3\x6E\xB7\x8E\xB4\x3D\x07\x95\x28\x7B\xF8\x94\x11\xAD\x6D\x0D\xAD\xE3\x5B\xF6\x34\xBF\xE5\xFA\x0E\x5E\xB1\x6F\x1E\x58\xDA\xC5\x72\x2C\x54\xA2\x88\xC3\x08\xBF\xD8\x27\x8E\x12\x6C\xD7\xDC\xAB\xB5\xE6\xE2\xC9\x9F\x65\xE0\xE4\x6B\xB9\x74\xFA\x5C\x1E\x7B\x68\x35\xE5\xA5\x69\x1A\x07\x2C\xE8\x11\x78\xFF\x14\x40\x80\xF7\xCA\xBE\xC8\xC0\x21\x27\x32\xEC\xA8\x23\xF9\xC2\x25\xF5\x1C\x79\x44\x31\xF3\x67\xCE\x01\x01\xF9\xF6\x1C\x52\x4A\x63\x41\x79\xB6\x69\xF8\x0B\x82\x56\x08\x81\xE5\x58\x24\x89\x22\xCA\x87\xA4\xCB\x8A\xB0\x6C\x23\x98\x93\x82\x6C\x49\x42\xC3\xCE\x38\x34\x5A\xD1\x2B\xF4\xC1\xAE\xEF\xA1\x94\x91\x33\xB6\x63\xA6\x74\x9C\x8F\xBA\xCD\xD5\x28\x1F\xE2\x15\xF9\x14\x57\x14\x1F\x57\x39\xA0\xF2\x8D\xED\x6F\x6F\x2B\x01\xAD\xD0\x66\xDA\xC7\xF9\x08\xC7\x73\x0D\x8B\x0B\x0F\x2F\x55\x92\x32\xDF\xE7\xDA\xDC\x78\xE9\x97\xF9\xC2\x9C\x7A\x74\x92\x61\xE6\xE5\x77\xB0\xAF\xB5\x1F\xF5\xC5\x97\xFF\x33\x28\x3E\x1E\x80\x60\xB4\xDA\x31\xE7\xDC\xC8\x82\x6F\x34\x70\xEA\x99\x3E\xD9\x6C\x8E\x0B\x8E\xFF\x0C\x96\x6B\x83\xD0\xA4\xCB\x8A\x0A\xD5\xD4\xC8\x10\xCB\xB1\x70\x53\x1E\x49\x14\x63\xD9\x92\x38\x30\x00\x09\x29\x0B\xEB\xA2\xF9\xEB\x97\xA4\x90\x42\xA2\x31\x4C\x14\x52\x74\xEB\x46\xCB\xB6\x0A\xAC\xB1\x4C\xE7\x52\x58\x3A\xF2\x9D\x79\x1C\xDF\x35\x85\xC6\x92\x8C\x9C\x76\xCC\xB8\xE3\xCE\x3D\x7E\x80\xB4\x6D\x21\x6D\x89\x94\x02\xA4\x00\x01\x7E\x91\x0F\x98\xB5\x31\xCC\x05\x14\x57\x95\x30\x7B\xFC\x2C\xD6\xD7\xEF\xE1\x85\x57\x4E\x62\xF9\xB2\x65\x5C\x76\x69\x05\x17\x4F\xCA\x7E\x2C\xF0\x00\xFE\xE5\x5D\x39\x77\xFD\x0F\x71\x5D\x8B\x41\x47\xF6\xE3\xC2\x0B\x63\x94\x2A\x65\xDA\xBC\xDB\xB0\x6C\x89\xB4\xAD\xEE\x66\xDF\x29\xF4\xBD\x42\x0A\xE2\x7C\x64\x12\x29\x49\x75\xF7\xB9\x51\x2E\xC4\xB2\x2D\xDC\xB4\x47\x1C\xC6\x48\x5B\x76\x77\x26\xB6\x67\xA3\x0B\xCC\x13\x42\x12\x64\x03\x5C\xDF\x4C\xFB\x38\x8C\x90\xD2\x14\x24\xCB\x29\xFC\x66\x10\x21\xA4\x2C\xFC\x66\x88\x94\x92\x28\x6F\xF4\xA4\x5F\xE2\xFF\x8F\xDF\xBC\xE2\xB4\xB9\x4C\x1C\x37\x88\x95\x2B\xD7\xE3\x78\xA5\xEC\x6B\x6C\x41\x11\xD3\x36\xF8\x9B\x1F\x1B\xC0\x7F\xD9\x8D\x09\x47\x7E\x17\x6F\xDB\x23\x54\x57\xA4\x79\xFA\xFB\x5F\xE1\xFF\xDC\xF2\x16\x97\x9F\x32\x17\x69\x5B\x04\x99\xC0\xAC\x2F\x8E\x65\x5A\x31\xDB\x22\xCE\x47\x58\xAE\xDD\xCD\x16\x55\x58\xD7\xA4\x6D\x61\x39\x26\xF9\xAE\xFE\x57\xDA\x86\x91\x49\x18\x17\xAE\x6B\xA4\x2D\xF1\xD2\x6E\x61\xCA\x46\xD8\x8E\x8D\x9B\x76\x71\x7C\x1B\x21\x25\x71\x60\x8C\x58\x2F\xED\xA1\x92\x04\xCB\xB6\x89\x23\xB3\x3D\x90\x2A\x4D\x99\xEF\xD1\xBA\xFB\xFF\xCD\x1A\x7F\x36\x9D\x9D\x39\xEA\x06\xAE\x24\xC8\x07\x5C\x30\xE9\x65\xC2\x38\xEC\x15\x78\x3D\x02\x10\xC0\x1B\x73\x2D\x7E\xCA\xA7\x79\xD8\xAF\xA9\xEE\x3B\x94\xCB\x2E\xAD\x62\xDE\x49\xB3\xB1\x0B\xDA\x2D\x49\x14\x96\x2D\x41\x18\x36\x01\xDD\x9D\x85\x90\x86\x35\x00\x49\xA2\x40\x0A\x84\x14\x58\x8E\x4D\x1C\xC4\x74\xB5\x99\x42\xCA\x6E\x80\x92\x82\xD4\x31\x66\x04\x84\xD9\xA0\x70\xAD\xD0\x7F\xC7\x8A\x30\x67\xAE\x29\x95\xD0\x25\x67\xA2\xC0\xF8\xA4\xDD\x7A\x32\x51\x1C\x35\xB0\x3F\x67\x0D\xDF\xCC\x1D\x0F\x38\x1C\x3B\xFE\x18\x16\x3F\xDD\x41\xA6\xAE\x67\x15\xB7\xD7\x00\xEE\xE9\x73\x15\xAB\xD7\xEE\xE4\xCC\x29\xDB\xB9\xEC\xEC\xB5\xFC\xF0\xFB\x7F\x26\x08\x23\x3E\x3B\xE1\x1C\x03\x96\x32\xFA\xCE\xF5\x5D\xB4\x06\x29\x8D\xA1\x10\x85\x11\x6E\xCA\x54\x46\xAD\x94\xF1\x04\x31\xFE\xA0\x55\x00\xB5\xCB\xC6\x92\x96\x19\x92\xE5\xD8\x08\x4C\x51\x10\x52\x74\x5F\xD3\x4A\x17\xD6\x52\x73\x4F\x12\x25\xA0\x34\x49\x68\x04\xBA\xD6\xC6\x64\xED\x6A\xFF\x6C\xD7\xE2\xEA\xB3\x2E\xC3\x4B\x85\x0C\x98\x52\xCE\xFC\x79\x59\xDE\x5A\xB5\x8D\xF3\xAE\x9D\xD3\x6B\xF0\x7A\x0C\x20\x40\x63\xFF\x6B\x59\xBB\x6D\x0C\xDB\x9A\xA6\x73\xD6\x39\x17\xA1\x14\xBC\xBB\x6E\x39\x71\x98\x74\x83\xD3\xD9\xD2\x69\x4C\x81\x24\x21\xC8\xE4\x11\x40\xB6\x3D\x43\x90\xC9\x1B\xF3\xB3\x30\x85\xF3\x1D\x39\x82\x4C\x1E\xDB\xB5\x01\xA3\x29\x93\x42\xF7\x81\x00\xA5\xB4\x11\xC6\x40\x97\xBB\x8D\x32\xD3\x12\x4D\xF7\x54\xEF\x8A\x30\x1F\xA0\x12\xC3\x44\x69\x09\x92\x28\x61\xEE\xE4\xCF\x92\xF2\x1C\x36\x6C\xDE\x4F\xD3\x2B\x2F\xD2\xDE\x19\xD3\xD2\xDA\xCC\x8D\x8B\x67\x1D\x12\x00\x7B\x7C\xB4\x03\xA0\x72\xFB\x2F\xB0\x2C\xC9\x35\xD7\x94\x90\x6B\x59\xC7\x53\x4B\x8E\x26\x49\x3C\x6E\x7F\xE6\x77\x68\xA5\x90\x96\xEC\x66\x8B\x4A\x14\x5A\xAB\x02\x23\x8D\x33\x22\xDE\x07\x8E\xE5\xD8\x38\x29\xC7\x98\xA2\x18\xD6\x58\x96\x85\x5B\x64\xDC\x69\x69\x5B\xDD\xFB\x26\x5E\x91\xD9\xD7\xD1\x4A\xA3\x93\x84\x02\x91\xBB\x25\x93\x8A\x15\x49\x6C\x2A\xB8\xED\x39\xCC\x99\x74\x16\xB3\x07\x3C\xC3\xB6\xB8\x3F\x25\x43\x6B\x78\x7A\xC9\x00\x92\x24\xA6\x65\xF0\xF5\x87\x04\x3C\xF8\x98\xA7\xB3\x9A\x07\x7F\x8D\xB2\xD2\x34\x5F\x5B\xF0\x02\x8F\xFF\xA5\x96\xF3\x27\xBD\x4A\xA2\x14\x73\x4F\xBA\xA0\xE0\x1E\x99\xA7\x6F\xF4\x5E\x82\xED\x3A\xC8\x02\xBB\xE2\x30\x46\x6B\x8D\xB4\x4C\xDB\x27\x04\x84\x99\x00\xAD\x35\xC2\x32\xEB\xA4\x16\x10\x66\x0B\xD3\x59\x6B\xDC\x22\x0F\xAF\xD8\x37\xAC\xED\xCC\x9B\x07\x52\x30\x59\x65\xC1\xB5\x49\xA2\xB8\xE0\x78\x9B\x94\xAE\x98\x39\x8F\x54\xBA\x9C\x36\x77\x28\x6F\xEE\x1A\x49\x6D\xBA\x85\xF2\xF2\xD2\x43\x0A\x1E\xF4\xE2\x78\xDB\xE6\xD2\x2B\x99\x3F\xB1\x9E\x39\x53\x56\x72\xF3\xC2\x61\xB4\xB7\x36\x31\x7F\xBE\x66\xD6\x84\xB3\x91\x85\x36\x2C\x55\x9A\xEA\xEA\x1A\x4C\xC7\xE1\x3A\xB8\x69\xD7\x24\xA9\x31\x66\xA8\xD2\x48\xCB\x18\x05\x2A\x4E\x48\xC2\x18\xDB\xB6\x90\xB2\xCB\x6D\x36\x22\x5A\x45\x49\xC1\x3D\xF1\x11\xC2\x98\xB3\x2A\x51\xDD\x6B\xA1\xED\xB9\xE6\xD9\x49\xC1\xFC\x99\x73\x39\xB0\xF2\x36\x8A\xD2\x1E\x7F\x7D\xEF\x58\xFA\x77\xDC\x46\xD4\x67\x1C\x52\x7C\x7C\xBD\x77\xB0\xE8\xD5\x01\xCB\x17\x5B\x2E\xE4\xE5\x67\x1C\x66\x8D\x7F\x8F\x1A\x77\x35\x8B\x9F\xB8\x8C\xAA\x72\x63\xA1\x47\x61\x4C\x94\x37\x2C\x8A\x63\xD3\x51\x84\x51\x40\x12\xC4\xC6\x23\x74\xAC\x82\xA8\x86\x38\x4C\xBA\x0B\x88\x9B\xF2\x90\x8E\x45\xD7\x8E\xA3\x2A\x4C\x73\x53\x79\xAD\xEE\x2E\x46\x58\x12\xBF\xC4\x37\xAD\xA2\x8A\x8D\x09\x1B\xC6\x38\xBE\x8B\xF3\xEE\x02\x4A\x9B\xF3\x64\x3A\x3F\xC7\x7B\x9B\xDE\xA1\xB3\xDF\x57\xD8\x78\x47\x40\x6B\xED\x75\x87\x00\xB2\x0F\x46\xAF\x0E\x58\x76\x0C\xF9\x06\xE5\xA5\x3E\xEB\x3B\x8F\x65\xC9\x9E\x39\x9C\x3F\x69\x19\xCD\x6D\x07\x38\xFF\xB8\xF3\xB0\x6D\x03\x42\x1C\x44\x08\x01\x41\x26\x6F\x74\x61\xCA\x6C\x03\x98\x3E\x35\x26\x0A\x62\xC3\x22\xA5\x50\x89\xC6\x2E\x98\xAF\x5A\x69\x2C\xDB\x42\xDA\x16\x49\x1C\x83\x86\x6C\x6B\xB6\x50\xC1\x05\xBA\x50\x54\x92\x38\x29\x38\xDB\x46\x3E\x7D\xFE\xE4\xCF\x91\x1F\xF6\x23\x9A\x46\x7E\x97\x24\x4E\xF8\xEF\xCF\xD6\xE3\xFB\xA9\x4F\x04\x3C\x38\x04\x67\xA4\xB7\x94\x5D\xC5\x8B\xF7\x5E\xC5\xB9\x35\x0F\x72\xF3\xA2\xE1\x94\xA6\x7C\xE6\xD4\xFD\x9E\x4B\xA7\x5F\x82\x4A\x0C\x28\x46\x1F\x16\xA6\x63\x10\x91\xC4\xAA\xC0\x4E\xD1\xBD\x61\xA4\x94\x69\xFC\xB3\xED\xB9\x6E\x81\x6C\x40\xEA\xF2\xF5\x14\xA9\xD2\x34\x56\xA1\xC2\xC6\x05\xD1\x8D\xD2\x46\xFB\xE5\x43\xE6\x9F\x3C\x97\xCF\x4D\x7B\x91\x54\xBA\x9C\x54\x71\x05\x13\x26\x0C\xE7\x6D\xF1\x6D\xF6\x1D\x71\x75\xAF\x81\x3A\x58\x1C\x92\x43\xE6\x47\x9D\x72\x13\xBF\xAB\xBF\x88\x05\xD7\xFA\x7C\xFA\xD8\xBF\xF0\x5C\xCB\x15\x6C\x78\x77\x0D\x73\x3F\x75\x51\xB7\x40\x8E\xC2\x88\x5C\x6B\x16\xAF\xC8\x37\x1B\x40\x05\x86\xDA\x9E\x8D\xB4\x2D\xFC\xB4\xDF\x5D\x00\x82\x4C\xDE\x1C\x28\xC2\x78\x81\x49\x64\x34\x5E\x98\x0F\x8D\x41\xEB\x9A\xDD\x36\xA5\x34\x1A\x8D\xED\x58\x5C\x79\xDA\x3C\x6A\x2A\x15\x62\xD0\x4C\x8E\xE8\x53\x8A\x14\x1E\x7F\xFD\xDB\x3A\x26\x1E\xF3\xC2\xA1\x48\xF1\xA0\x71\x48\x00\xEC\x18\xF2\x0D\xAA\x2A\x4A\xB9\xE7\x07\x8B\xB9\x6B\xC9\x58\x2E\x38\xF1\x35\xCE\x38\xE3\x64\xE2\xD8\xB4\x51\x96\x63\x21\x30\x52\xA3\x4B\xB7\x39\xBE\x8B\x57\xE4\x11\xE5\x42\xD3\xFB\x4A\x89\xED\xD9\x78\x69\xB7\x60\x52\x18\x96\x49\xCB\x58\xFB\x48\x90\x05\x23\x22\xCC\x98\x43\x02\x76\xC1\xF6\xBF\x78\xD2\x6C\xA2\x58\x31\xBA\xE3\xA7\xDC\x79\xDB\x5E\xD6\xDD\x7D\x3E\xFB\xF7\xAD\x43\xC5\x09\x37\xFE\xF5\x27\x87\x22\xC5\x83\xC6\x21\x7B\xCD\x61\x43\xFA\x32\x46\x0E\xAE\xE2\x38\xFB\x19\xFE\xB0\x6C\x12\x5B\xB6\xEE\x63\xC1\x97\x0E\x70\xDD\xAC\xAB\x8D\x41\x6A\x49\x12\x65\x2C\x2C\xB3\xDE\x99\xE9\x2D\x0A\x76\x98\x4A\x12\x74\x61\x5D\x44\x53\x10\xD7\x46\xE8\x99\xD6\x2E\x36\x2E\x0B\x14\xAA\xAF\x69\x03\xE7\x9E\x74\x21\x9F\x9E\xD2\x4E\x79\xA9\xCF\x73\x9D\xD7\x73\xD5\x17\x7C\xBE\xF4\x1F\xE7\x32\x70\xF0\x04\xDA\x87\x7C\xE3\x50\xA5\x77\xD0\x38\xA4\xEF\x89\x6C\x88\x3F\xC5\xCE\xCA\x2F\xD1\xB7\x4F\x19\x17\x0D\x7A\x02\xE1\x4C\x64\x54\xC7\xD7\xB9\x7C\xC6\x5C\xD0\x1A\xBF\xD8\xEF\x3E\x81\xE5\xF8\x66\x67\x4E\x08\x0A\xD7\xF3\x68\xA5\xB1\x5D\x07\xA5\x14\x2A\x4E\x70\xD3\x1E\x51\xBE\xE0\x6A\x7B\x46\x4B\x6A\x0D\xB6\xEF\x98\x35\x6F\xFA\x25\x9C\x7B\xDA\x3E\x2A\xEB\x42\xB2\x9D\xAD\xD4\x54\xF9\xFC\xFC\xD6\x84\x7B\x56\x9C\xC1\xD6\xF2\xCF\x1F\xCA\xD4\x0E\x1A\x87\x14\xC0\xE6\xC1\x5F\xC3\x76\x1C\x4E\x3E\x65\x2F\xA9\x1A\x97\x39\x17\xDE\xC2\xB0\x79\x77\x92\xC9\x66\x38\x6F\xC2\xB9\xC8\x82\x1F\x68\x39\x16\x61\x36\x40\x60\xC0\x08\x0B\x46\xA9\xB4\xA5\x39\x03\xA8\x35\x8E\xE7\xA0\x62\xD5\xDD\x1B\x47\xF9\x90\x7C\x47\x1E\xEB\x7D\x53\x38\x51\x8A\x23\x06\x3A\xEC\xFA\xE3\xEF\x68\x7A\xF3\x76\x66\x9F\xDF\x0F\x21\xA0\xAA\xF8\xD0\xEB\xBD\x83\xC5\x21\x7F\x53\x69\x67\xD5\x17\x78\xE0\x41\x1B\xEA\x26\xF3\xBF\xCE\x38\x89\x2F\x5E\xF9\x5B\x2C\x69\x31\xA4\xB6\x1F\x51\x10\x99\xAD\xCB\xC0\x68\x36\xCB\xB3\x11\x08\x03\xAC\x94\xE6\xDF\xB6\x65\x76\xF1\x82\x08\x69\x1B\xB3\xB5\xAB\x25\x4C\x97\xA7\x4D\x61\xF1\x1D\x66\x4F\x3C\x83\x38\x8A\xB9\xEB\xDE\x72\xA4\x88\x38\xF5\xCA\x9F\x70\xDE\x71\xE7\xA1\x94\x62\x5D\xF1\x27\x3F\x75\xBB\xE2\x13\x79\xD5\xEB\x40\x4B\x07\xCF\x2E\x1D\xC4\xB2\x37\xB6\x31\x66\xDC\x14\x46\x8F\xEC\xCB\xA8\xE2\x57\xB8\x61\xCE\x02\x54\x62\x4E\x11\x78\xC5\x3E\x51\x3E\x42\x25\x0A\x27\xE5\xE2\xA6\xDD\x6E\xB9\x13\xE5\xCD\x5E\xB2\xC0\x80\x65\xCE\x50\x7B\x04\x9D\x79\x92\x38\xE6\xE2\x13\xCF\x67\x88\x78\x81\xFE\x7D\x8B\xC9\x06\x19\x5A\x46\xFE\x9E\xFD\x4D\x59\x4E\xBE\xF2\xC7\x74\xD4\x7D\xEB\x93\x48\xE9\xA0\xF1\x89\x00\xD8\x56\xFB\x4D\x76\xEF\x69\x67\xCA\xD4\x33\x49\xB7\x2D\x66\x98\x73\x27\xCB\x77\x1F\xCD\xF3\xCF\x3D\xCD\xFC\x19\x73\x10\x52\x18\xCB\xA9\xB0\xEB\x96\x84\x89\xD9\x79\x2B\x1C\x52\x42\x43\x98\x0F\x89\x82\x98\xA0\x23\x6F\x3A\x90\x28\x46\x48\xC1\x95\xA7\xCE\xC3\x3D\xF0\x28\x93\x4E\xB0\x68\x6E\x6F\x67\xF7\xD6\x4D\xAC\x7E\x7B\x23\x1B\xEA\x9B\x68\x1D\xD8\x3B\x73\xF4\xE3\xC4\x27\xF6\xB2\x61\x43\xBF\x6B\x98\x3A\x79\x2C\x4F\xBC\x92\x65\xA7\x75\x2D\xA9\xB7\xAE\xE3\xA6\x9B\x8F\xA7\x33\xD3\xC9\x99\xA3\x4E\x29\xEC\x81\x18\xBF\x10\xBA\x9C\x19\x8B\x28\x8C\x11\x96\x34\x9B\x42\x02\x63\xBC\x0A\x81\x52\x8A\x2B\x4E\xBB\x94\x38\x4A\x38\xA9\xEF\x46\x76\xDB\x0B\xA8\x68\x7A\x8C\x5B\xBE\x29\xC8\x64\x33\xCC\x39\xAF\xFD\x93\x4A\xE5\x23\xE3\x13\x7D\x5B\xF3\x85\xA5\x6F\xF2\xD8\xB7\xFB\x90\xF6\x97\x50\xF7\xE9\x8B\xB9\xFF\xFE\x04\xD7\xF5\x18\x77\x6C\x5D\xB7\x2E\x8C\x43\xD3\x99\xA4\x4B\x8B\xD0\x85\xE2\x81\xD6\xE4\xDA\xB3\x85\x53\x5D\x16\x5A\xC3\x67\x27\x9E\xCB\xA0\x01\x65\xE4\x83\x3C\x2F\x8B\xEF\xA1\x57\xCC\xA1\x31\x75\x1C\x8B\x5F\x9B\x48\x47\x67\x07\xBF\x7C\xE3\x86\x4F\x32\x95\x83\xC6\x27\x0A\xE0\xAE\xEA\x2F\xB2\xAE\xE8\x5B\xEC\xDA\x37\x9D\x35\xDB\xA7\xA0\x91\x5C\x38\xFB\x64\x36\xAF\x5F\xC3\xF7\x2E\xFD\x9A\xB1\xE8\x63\xA3\xFF\xB2\xED\x19\xD3\x65\xD8\x66\x47\xCF\x72\x6C\xE3\xF1\xA9\x84\x8B\x4F\x3C\x8F\x92\x92\x34\x3F\xFF\xEA\x45\xD4\x0E\xEA\x43\x18\x46\x2C\xDA\x31\x97\x81\xB5\x13\xD8\xBA\xAB\x95\x70\xE4\x77\x3F\xC9\x34\x3E\x32\xFE\x1F\xB9\xD0\x35\xFC\x39\x1E\x26\x13\x00\x00\x00\x00\x49\x45\x4E\x44\xAE\x42\x60\x82'
        #    #target.write(kbytes)
        #    target.write(output.getvalue())
        #    target.close()

        #kbytes = b'\x89\x50\x4E\x47\x0D\x0A\x1A\x0A\x00\x00\x00\x0D\x49\x48\x44\x52\x00\x00\x00\x50\x00\x00\x00\x3C\x08\x06\x00\x00\x00\xF1\x27\x3D\x8C\x00\x00\x19\x6D\x49\x44\x41\x54\x78\x9C\xED\x9B\x79\x94\x55\xC5\xD9\xEE\x7F\x55\x7B\x3C\xA7\xE7\x09\x04\x04\x5A\x1A\x90\x41\x64\x10\x05\x91\x30\x38\x0F\xD7\x10\x83\x23\x04\xC5\x68\xA2\xD1\x90\x44\x33\x7D\xF9\xCC\x97\xF8\xE5\x66\x30\x9A\x9B\x9B\xC1\x38\x6B\xE2\x10\x0D\x68\x8C\x18\xE3\x10\xD1\x48\x10\x07\x54\x40\x10\x81\x06\x64\x1E\xBA\x69\x7A\x3E\xC3\x9E\xAA\xEE\x1F\x75\xBA\x97\xE6\x13\x93\xB6\x71\x65\xDD\xB5\x78\xFF\x69\xD6\x3E\xEC\x73\xEA\x7D\xF6\x53\xF5\x3E\xEF\x53\xB5\xC5\xF7\x9F\xD0\x9A\xC3\xF1\xB1\x43\xFE\xBB\x07\xF0\xFF\x7B\x1C\x06\xB0\x97\x71\x18\xC0\x5E\xC6\x61\x00\x7B\x19\x87\x01\xEC\x65\x1C\x06\xB0\x97\x71\x18\xC0\x5E\xC6\x61\x00\x7B\x19\x87\x01\xEC\x65\x1C\x06\xB0\x97\x71\x18\xC0\x5E\xC6\x61\x00\x7B\x19\xF6\xBF\x7B\x00\x1F\x16\x47\xE7\xEE\x27\xDB\xD6\x88\x57\x5C\xC3\xE6\xE2\xF9\xFF\xEE\xE1\x7C\x64\xF4\x8A\x81\x99\xB6\xC6\xA6\x3D\x9B\xDF\x5C\x1F\xE6\x3A\x3A\x7B\x7A\x6F\x6B\xC3\xD6\x9D\x3B\xD6\xBF\xBC\xE6\xFD\xD7\x46\xBF\x51\x4E\xD5\xCE\x5B\x08\x82\x90\x6C\xE4\xB2\xBF\x69\x3F\xB5\xAD\x77\x33\xFA\x8D\xF2\x83\x7E\xCF\xB6\xB5\x7F\x5B\xFD\xCA\x13\x3F\x5B\xAA\x55\x92\x1C\xEA\x31\xFE\x2B\xDF\xF7\xB1\x18\xB8\x6B\xE3\x6B\xEF\x3C\x7B\xCF\x57\xC5\xEE\x4D\x2B\x46\x03\xD5\x42\x48\xD5\x67\xF0\x98\xFA\xD3\xE6\xDF\xDC\x51\x37\xEE\xF4\xE3\xFE\xD9\xFD\x6D\xFB\x77\xEC\xB9\xE7\x5B\x93\x53\x71\x94\x2F\xFF\xF1\x0F\xFF\x8B\x09\xD9\x9F\xB1\xC2\xBA\x82\xF5\xFE\xF5\xF8\x9D\xAD\x5C\x7E\x71\x27\x77\x3C\xE8\xD3\x77\xCB\x0D\x4C\x3D\xEF\x2B\x3C\xDA\xF8\x9F\x4C\xE4\x77\x2C\x59\xF2\x1C\xB5\x43\x8F\xA7\xB5\xF6\x7A\x93\x4C\x6B\xC3\xFE\x45\x3F\x3D\x7F\xF0\x98\xE9\x73\xD6\x0A\x69\x59\x87\x72\x8C\xFF\x6A\xCE\xA2\xA7\x7E\xE0\xEE\x4D\x2B\xD6\xDD\xFF\xDD\x99\x47\x45\x41\x36\x3D\x70\xC4\x94\xB5\x03\x86\x4F\x6A\x6E\xD8\xB6\xA6\x74\xEB\xDA\x17\xC7\x59\x96\x13\xCD\xFE\xFA\xC3\x2B\x47\x9E\x38\x7B\xF2\xC1\xEE\x8F\x82\x6C\xF6\xBE\xEF\x4C\xDD\xB1\xEF\xBD\x55\x23\x52\xE9\x54\xC7\x9E\x47\xC7\x94\xFC\xB6\xFE\x22\xAA\x2B\x1C\x32\x79\x87\xAB\xAF\xAA\xE0\x91\x45\x31\x7B\x77\xEF\x25\x95\x4A\x33\xAA\x68\x09\xAB\x9A\xA7\x72\xF2\xA7\x46\xB3\x64\xE9\x5A\x46\x0E\x3F\x82\xD3\xCF\x74\x79\xF8\x91\x1C\x37\xDD\xFE\xD4\x6B\x5B\x56\x3F\x3F\xEA\xAB\x77\x6E\x89\x53\x25\x55\x95\x87\x6A\x8C\x3D\xC9\xB9\x67\x0C\xD4\x5A\x3F\xF1\xCB\xF9\xA9\x28\xC8\xA6\xA7\xCE\xFE\x8F\x97\x4E\x99\xF7\x93\x19\x5D\x1F\xAD\x5A\x72\xDF\xCB\x4F\xFE\xE6\xCA\x93\x16\xFF\xFA\xF3\xA3\xEB\xC6\x9F\x91\x71\xFD\xE2\xA2\x7F\xBC\xBD\x61\xDB\xDB\xF5\x2B\x1E\xF8\xB4\xDA\xF7\xDE\x8E\x11\x00\x5A\x69\x96\x67\x4F\x65\xC4\xF0\x6A\xDA\x5B\x3B\xE9\xCC\x26\x4C\x9D\x73\x1B\x37\xFC\xEA\x6F\x1C\xF8\xC3\xAD\xD8\xC7\x5D\xC0\x8D\xB7\x3F\xCE\x45\x93\x52\xF4\xCD\xFD\x94\x2B\x4E\x3F\x87\x1F\xFD\x76\x39\xDB\x77\x1D\xCB\xC0\x23\xB7\xBE\xF1\xEE\x2B\x8F\x4D\x16\x23\x8E\x7B\xE9\xC1\x05\x83\x66\xEC\x6D\xCD\x1A\x32\xF4\x72\x8C\x3D\xCD\xB9\x47\x6B\x60\xFD\x5B\x7F\x79\xB3\x69\xD7\xFA\x21\x5E\xBA\xAC\x7D\xFA\x45\xDF\xFF\xC0\x13\x1C\x7F\xEA\xE7\xA7\xD6\x1E\x33\xE3\xED\x20\xDB\x5E\xB2\xE6\xA5\x87\xDE\x7A\xFF\x67\x7D\xF7\xFC\x26\xD8\x7F\x6F\xD9\x4B\x77\x5D\x3F\x61\xC8\xCA\x95\x3B\x46\x54\xD7\x54\xEF\x04\x10\x42\x73\xCE\xF9\x53\xB9\xF9\xB1\x07\xB8\xF5\x99\x47\x59\xB8\xE2\x71\x2C\xC7\x62\xCB\xC2\x5B\xA9\xE9\xD3\x07\xBD\xFA\x8F\x08\x29\x79\x78\xF9\xA3\xCC\x7B\xD8\x67\xD1\xAB\xC5\x8C\x2F\x7F\x93\xAB\xCF\x7A\x95\x2F\x2F\x78\xD4\x07\x62\xBD\xE1\xAD\x53\xF6\xB6\x66\x45\x6F\xC7\xF8\x71\x73\xEE\x11\x80\xEF\xAD\x7E\x3E\x0B\x30\x7A\xEA\x85\x6F\xDB\xAE\xEF\xFF\xE3\xE7\x63\xA6\xCD\xE9\x00\x58\xF5\xC2\x7D\xD5\x00\x47\xB5\xDE\x4D\xBF\x5D\xDF\x67\xC9\x0B\x4B\xDE\xB8\xED\xCF\xED\x33\xB4\xD6\xF2\x33\xB3\xCE\x7C\x69\xDE\x45\x67\xE4\x00\xA2\x38\xD1\xD3\x2F\xBD\x05\x95\x28\xDC\x94\x8B\x10\x82\x38\x8C\x59\xF8\xDA\x9F\xB8\xE3\xD9\x7B\xF9\xFD\xF2\x47\x89\xF2\x21\x42\x0A\xE2\x20\xE2\x0F\x2B\xFE\xC8\x1D\x9B\x4A\xF8\xFA\xAF\xAA\xDE\xD9\xB6\x75\xDB\x98\x8A\x51\xD6\xBA\xD3\x1E\x2D\xE9\x2E\x1E\x43\x3B\xEF\xE3\xDD\x27\xBF\xD5\xA3\x31\xF6\x36\xE7\x1E\x4D\xE1\x5D\xF5\xAF\x57\x03\x0C\x18\x7A\xFC\x87\x7E\x3E\x60\xD8\x09\x7D\x01\x1A\xB7\xAE\xAA\x5B\x75\xEF\x29\xC9\xA0\xCF\x5C\x60\x35\xB5\x3B\xB8\x9E\xCB\xD4\x93\x4E\x78\xF5\xB4\xD3\xA6\x55\x55\x54\x0D\x98\xF1\xE0\x8B\x0B\xB7\x74\xDD\x13\x85\x31\x6E\xCA\x25\x89\x12\x54\x92\xE0\x17\xFB\x84\xB9\x10\xCB\xB1\x10\x89\xC0\x4B\x7B\xE4\x3B\x73\x68\x25\x41\x6B\xE2\x30\xE6\xC1\x3F\x3E\xDC\x06\xD0\xEA\x9C\xD8\xB6\x64\xCB\x55\xA4\x67\xFF\x59\xFF\xFC\xB4\x19\xD8\x52\xD2\xDA\x96\xA9\x06\x38\xBA\x72\xD7\x47\x8E\xB1\x61\xDB\x9A\x3A\xAD\x92\xE4\x1F\x8B\x4F\x4F\x73\xEE\x11\x80\x1D\x07\x76\x57\x02\xA4\x4B\xAB\xDD\x0F\xFB\xFC\xF2\x13\xD6\x97\xDC\x01\xC4\x71\xEC\x8D\x19\x3F\x69\x6F\x9C\xA8\x7E\xE3\xAB\x37\x33\xF3\xEA\x4B\xA6\x2C\x5F\xB1\x51\x3E\xBD\xEE\x79\xC2\x0D\x2B\x88\x83\xD8\xDC\x20\x20\x5D\x96\x22\xCC\x86\x86\x85\x69\x0F\x95\x28\x2C\xC7\x22\xE8\xCC\x83\x80\x20\x9B\xC7\x76\x6C\x1C\xDF\x21\xC8\xE4\x01\x74\xDB\xBE\xD6\x11\x00\x83\x9A\x06\x0E\x99\xFC\xD7\xDF\xB2\xEA\xBD\xE1\x1C\xF5\xC5\x2A\x4A\x7D\x9B\xB6\xB6\xF6\x4A\x80\x81\x83\x86\xB9\xEE\xBA\x1F\x30\x65\x4C\x9E\xFA\x7D\x83\xD8\xD3\xE7\x6A\x00\x52\x25\x95\x25\x00\x49\x14\x78\x1D\x2D\x7B\xF7\x96\x56\x1D\xD9\xAF\x37\x39\xF7\x68\x0A\xE7\xB3\x6D\x25\x66\x10\x55\xDD\x54\xAE\x6D\xBD\x8F\x6B\xE2\xD1\x0C\x6A\xBE\x8B\xD2\x8D\xDF\x2B\xEB\xBA\x3E\x6B\xD4\xB2\xBC\x8C\xDF\x63\xA7\x9A\xC8\x7F\xDE\x77\xAB\x7C\x72\xD5\xB3\xC4\x51\x82\x56\x0A\xDB\x29\x3C\x74\x0D\x61\x2E\xC2\xF1\x1D\x34\x90\xEF\xCC\x01\x60\xBB\x0E\xC2\x92\x68\xA5\x49\x15\xA7\x88\xC3\x98\x4C\x73\x27\xD2\xB2\x08\x32\xF9\x4D\x61\x3E\xAC\x12\x42\xC4\x47\x9D\xB9\xBF\xDF\xC2\x17\x5F\x14\xFD\xA6\xD7\xF3\xC3\x07\x6F\x67\x6D\x7D\x03\xF9\x7C\xBE\x04\x20\x8C\x12\x7F\xE4\xC8\x3A\xB6\xAD\x78\x8E\x09\xE3\x86\x52\xD7\xFA\x6B\x2A\x77\xFD\x8C\x54\x71\x65\xF7\x18\xA3\xBC\x79\x22\x3D\xCD\xF9\xFD\xD1\x23\x06\x46\x41\x36\x05\xE0\x17\x95\xA7\x06\x1D\xB8\x83\x28\x86\xB3\x87\x3D\xC4\xE2\xCD\x5F\xA0\xBD\xA3\x9D\xD5\xFD\xBF\x93\xB6\xAC\x2B\x92\x24\x51\xD6\x1F\xFE\xDC\x1C\xAD\x4E\xAF\x05\xD6\x92\x44\x31\x52\x4A\xDC\x22\x8F\x20\x13\x10\x05\xA1\xF9\x42\x01\x68\x4D\x12\x27\x14\x95\x15\x91\xEB\xC8\x12\x47\x09\x49\x94\xE0\xA4\x5C\xE2\x00\xE2\x30\x26\x55\x96\x26\x09\x63\xA2\x20\x24\xD7\x99\xDF\x0F\x0C\x77\xD3\x5E\xA3\x8A\x54\xFF\x53\xAE\x3A\x43\x0B\x29\xC8\xB5\x65\x59\xF4\xD6\x93\x04\x41\x90\x02\x28\x2A\x2A\x49\x7D\x66\xE4\xB3\xA8\x4F\x5F\xC7\x63\x8B\x76\x13\xEB\x14\x53\x92\x5F\xF1\xFC\xD6\x30\x2D\x84\x48\xB4\xD6\x56\x1C\xE5\xA3\x9E\xE4\xFC\x61\x9F\xF7\x88\x81\x45\x65\x35\x07\x00\xF6\xBF\xF4\xF5\xE0\xF9\x7B\xBE\x45\x67\xB6\x9D\xC5\x5B\xE6\xD1\xBF\x62\x3F\x23\xDB\xBE\xC7\xDE\x7D\x07\x72\x49\xA2\x2C\x80\x65\xB9\x32\x4F\x25\x8A\x24\x4A\xF0\x8B\x53\x58\xAE\x4D\xAE\x2D\x8B\x90\x02\xF1\xBE\x65\x47\x6B\x88\x82\x88\x5C\x47\x16\xA5\x14\x7E\xB1\x0F\x42\x10\xE5\xC2\x0F\xFE\xB8\x10\xD8\xAE\x43\xD0\x99\x8F\x01\xBC\x22\xEF\x00\x68\xC2\x6C\x40\x98\x09\x10\x52\x90\xEF\xC8\xE1\xF8\xCE\x01\x80\xE7\xD7\x2D\x0D\xEE\x5C\x3A\x89\x45\x8B\x32\x54\x6C\xB8\x06\xB6\x2F\xE2\x4D\xEF\x7A\xFA\xF5\xA9\xCE\x69\xAD\x2D\x80\x8A\xC6\x47\xBC\x7F\x35\xE7\x30\xD7\x11\xF4\x0A\xC0\x1B\x67\x3D\xCF\xF0\x5A\xD9\x0C\x50\x7D\x44\x5D\xEE\x98\x63\x8F\x62\x60\xBF\x6A\x66\x7E\x6A\x0C\x8F\xFC\xE2\x27\xEC\xAF\xBB\x85\x85\xCB\xFF\xD4\xD6\xF5\xFF\x6D\x4B\x16\x09\x29\x10\x02\x72\xED\x59\x00\x1C\xDF\x45\x2B\x0D\x89\x2A\xA0\x07\x42\x02\x08\xD2\x65\x45\xB8\x29\x8F\x5C\x5B\x16\x37\xE5\xE2\x16\x79\x68\x6D\x80\xEB\xAA\xCE\xE6\x6F\xA4\x01\xBC\xB4\xDF\xA9\x62\x05\x08\xDC\xB4\x87\x65\xDB\x08\x21\xF0\x8A\xFC\x66\x80\x6C\x47\x36\xB7\xE8\xCD\x27\xB9\xE3\xB9\x45\x6C\xE9\x77\x0B\x4E\xDC\x86\x25\x35\x99\x8E\x5D\xDD\x63\x5C\xB5\xE2\x99\x22\xFD\xFA\x15\x8C\xC8\xDE\x7F\xD0\xBC\x4B\x2A\xFB\x37\x03\xE4\x3A\x9B\x73\x3D\x06\xB0\xAE\xF5\x6E\xFE\x6B\xC6\x0D\xDC\x30\xE0\x6C\x7E\x7D\xEB\xBB\xC4\x49\x55\x07\xC0\xE4\x49\x76\xD8\x7F\xF2\x97\xC9\xE5\x5A\xF9\xFB\xF2\xD5\x6C\xAF\x9D\xC6\xBD\x4B\xFE\x88\x4A\x92\x0E\x00\x69\xC9\xBC\x74\xED\xF2\x20\x93\x47\x6B\xB0\x3D\x87\x28\x88\xD0\x68\x84\x14\x28\x5D\x00\x50\x80\x10\x02\xCB\x92\x64\xDB\xB3\x68\xA5\xD1\x5A\x13\xE6\x42\xF2\x1D\x39\x52\x25\x29\x82\xCE\x3C\x61\x2E\x34\x54\x45\x63\x39\x5D\xAB\x8E\x16\x96\x63\xA1\x95\x22\xCC\x86\x08\x01\xB6\x6B\xE3\xF8\x4E\x07\x80\x8A\x55\x18\x66\x02\x54\x9C\xF0\xD0\xD2\x3F\xF0\xC0\x81\x2A\x2A\x2A\xCB\xB1\x37\xDD\xDC\x01\xE0\xBA\x6E\xFE\x91\xDF\xCE\x2E\xAF\x3A\x62\x0C\x51\x9C\x70\xE3\xD4\x6F\x32\x72\xD3\xB9\x0C\x6C\xBA\xFB\x83\x00\x56\xF4\xEF\x00\xC8\x75\x34\xFF\xC3\x94\xF8\x08\x00\xFB\x37\xFE\x86\xA3\x3B\xEF\xA5\xBC\xC2\xC6\x6A\x69\xE0\xAE\xD7\xCF\xC4\xF3\x1C\x2A\x2A\xCA\x73\x00\xAB\x56\x6D\x4C\xC2\x20\xE6\x9E\x25\x4F\xF2\xBB\x97\x1E\x43\x08\x81\x94\x82\x96\x3D\xCD\x0D\x00\x25\xD5\xA5\x9B\x2D\x4B\xDA\x5D\xC9\xDA\xAE\x8D\xD6\x1A\x15\x2B\x53\x51\x3D\x53\xD0\xB4\x06\x2F\xED\x15\x0A\x86\x22\xCC\x06\xA4\x4A\xD3\x05\x7C\xA0\xB3\xB9\x83\x54\x69\x0A\x21\x04\x2A\x51\x84\xF9\x08\xDB\xB5\x6D\x80\x30\x1B\xA4\x10\x02\xA3\x42\x34\x61\x3E\x22\x89\x13\x52\xA5\xE9\x1C\x40\xEB\xBE\x96\xC4\xF6\x6C\xDC\xB4\x87\xB4\x24\x41\x2E\xE0\xF6\x67\xEF\xE7\x97\x6B\x86\x36\x00\x54\x56\x14\x6F\x7E\xFC\xEE\x25\xB6\xE3\x4A\xCA\x3B\x9F\xE6\x17\x0F\xF5\xA3\x2D\x35\x92\xCE\x4C\x27\xDF\x2C\x3A\x8B\x54\xFD\x8F\x01\x28\xAB\x19\x94\x03\xD8\xFB\xDE\xCA\x0F\x35\x2B\x3E\x00\x60\x7A\xF3\x4D\x8C\xCC\xDC\xC6\x98\xF8\x11\xFA\xF4\xAD\xA2\x61\x7F\xC4\x53\xCF\x85\x5C\x7D\x75\x7F\xC6\x1F\x53\xCD\x29\x27\xCF\xA8\x02\xB8\xE3\xEE\xBF\x8F\x7A\x68\xD9\xC2\xC4\xF1\xDD\x6E\x56\x28\xA5\x38\xB0\xB3\x29\x0D\x50\xD1\xAF\xB2\x49\x5A\x12\x29\x25\x49\x1C\x93\x44\x09\x96\x25\x91\x96\x24\xCA\x87\x24\x91\x19\x8B\x10\x90\xCF\xE4\x11\x42\xE0\x78\x0E\x6E\x91\x47\x14\x44\x58\x8E\x85\x57\xE4\xE3\x97\xA4\x90\xB6\x85\x10\x02\xBF\xD8\x27\x55\x92\x22\x55\x9A\xF6\x01\xA2\x20\x2A\xB1\x5C\xAB\xBB\x82\x3B\x9E\x83\xE5\xD8\xF4\x19\xDC\xA7\x0A\xA0\x69\x5B\xE3\x28\xDB\xB5\x93\x28\x5F\xD0\x94\x85\xE5\x62\x6F\xFD\x9E\x34\x80\xD7\xB7\xB4\xA9\x21\x7D\x3A\xC5\x45\x29\x2A\x5A\x9F\x67\xDE\xCC\x1D\xC4\x72\x30\x02\x81\x37\xED\x02\xCA\x8A\x14\x6A\xC5\x15\x8C\x3D\xF9\xB2\x2A\x80\x77\x5E\x5E\x38\xEA\xC3\x1C\x9F\x0F\x00\x98\x1D\xFA\x1F\xEC\xDD\x1F\x30\xAA\x4E\x70\x4C\xFE\x3B\x2C\xFE\xC5\x97\xD8\xC5\x64\x2C\x2B\x60\xE5\x9A\x06\x9E\xDB\xB8\x74\x74\x59\x9F\xF2\x35\x61\x2E\xAC\xD9\xB6\x7A\xEB\xB2\x28\x88\x10\x42\xA0\x95\x62\xFF\xD6\xC6\x57\x5B\xF6\xB6\x8C\x93\x96\x0C\x8E\x18\xD6\x7F\x54\x14\x44\x68\xAD\x71\x7D\x97\x24\x8A\x51\x89\x42\x27\x0A\xDB\xB5\x49\xBA\xC6\xA1\x41\x5A\x16\x2A\x4E\x50\x89\x32\x85\x43\x6B\x92\x28\x26\x8E\x62\xB2\xAD\x19\xC2\x5C\x40\x1C\x45\x80\xA9\xB4\x7E\xB1\x37\x44\x08\x91\x64\xDB\x73\xB5\x99\x03\x1D\xED\x41\x36\x00\xA5\x41\x6B\x82\x4C\x9E\xD2\xBE\x65\xA3\x4B\xFB\x94\xAD\x09\xF3\x61\x4D\xFD\x2B\x1B\x97\x99\x52\x2F\x48\x12\x45\xE3\xD6\xC6\x57\x5B\x1B\xCC\x18\x07\x8C\x1A\x38\xEA\xD9\xF5\x2F\x72\xFB\x53\x0F\xB0\xA1\xE6\x47\x3C\x74\xDF\xD2\xD7\xD6\xFD\xFD\xCE\x65\x43\xAD\x87\xD7\xD6\x6F\x1C\x4A\xAC\x4B\xB9\xFE\x92\x22\x06\x0C\x3B\x61\xF4\xA0\x91\x53\xD7\x64\x5A\x1B\x6A\xFE\xF6\xF0\xF7\x96\xBD\x1F\xAF\x75\x2F\x2F\x7C\xF5\x7F\xC8\x98\xD6\xDA\xEB\x68\xD8\x75\x27\x83\x2F\xF9\x0A\xA7\x5F\x15\x31\xFF\xB2\x98\x19\xF3\xEF\x23\xCC\x87\xB8\x29\x97\xC1\x63\x6B\xD5\x3B\x2F\xAE\xC9\xED\x5A\xB7\x63\x46\x47\x53\xFB\xDB\x65\x47\x94\xB7\x64\x5B\x33\xA9\xA6\x1D\x4D\x93\xD0\x5A\x0E\x9D\x3C\xE2\x75\x37\xE5\x4E\xD3\xCA\xAC\x73\x42\x4A\x2C\xD7\x22\xCA\x45\x28\x14\x24\x02\xD7\x73\xCC\x8F\x15\xD6\x40\xAF\xC8\x27\x0A\x22\x10\x02\x6D\x2A\x07\x96\x25\x4D\xC5\x16\x02\xAD\x21\x8E\x62\xA4\x63\x61\xB9\x56\x65\x49\x4D\xE9\x9A\xF6\xC6\xB6\x63\xF3\x1D\x41\xBD\x93\xF2\x26\x0A\x21\xD0\x80\xED\xD8\xA8\x44\x33\x6C\xF2\xD1\x6A\xD5\xD3\x6F\xE6\x76\xBE\xB3\x7D\x46\x7B\x63\xDB\xDB\x65\xFD\xCA\x5B\x72\x6D\xB9\xD4\xFE\xED\x8D\x93\xD0\xC8\xBA\x13\x86\xBF\x5E\x52\x5D\x3A\x2D\xC8\x04\x48\x5B\xF1\xE0\xB2\xC7\xD9\xB4\xA4\xA1\x72\xEF\x9E\xBD\xC3\xD7\xEC\x9E\xF2\xF7\x51\x4F\xCD\x62\xCA\x25\x3F\xE7\x17\x5B\x7E\x05\xC0\xCC\xB9\xFF\x5B\xFD\xFE\x07\x67\xE7\x96\x3D\xF6\xE3\x19\x3B\xD6\x2F\x7F\x7B\xF0\xE8\x69\x2D\x8D\x3B\xDE\x49\x6D\x7C\x7D\xF1\xA4\x0F\xD5\x81\xCF\x65\xBF\xC4\x82\x94\xC5\x11\xF9\xC5\xF8\xDE\x7C\xCE\x3F\x7E\x16\x0B\x5F\xFB\x13\x2A\x51\x54\x0E\xAC\x1E\x37\xFE\x9C\x89\x1B\xD7\xFF\x7D\x9D\xD5\xD6\xD0\x3A\xB6\xAD\xA1\x15\x00\x37\xE5\x36\xD4\x4E\xA8\xDB\xD4\xA7\xB6\xCF\x34\xDB\xB5\x89\x82\x10\xAD\x4C\x41\xB0\x5D\x1B\xAF\xD8\x27\xC8\x04\x08\x61\xDA\xB7\x2E\x06\xC6\x61\x6C\x48\x82\x59\x2B\xA3\x5C\x88\xB4\x24\xDA\xB1\x90\x96\x44\x29\x6D\x0A\x84\x63\xA3\x1D\x4D\xD0\x99\xA7\x7A\x60\x4D\x4B\x7B\x63\x1B\x2D\xFB\x9A\x33\x25\x35\x25\x68\x69\x00\x57\x3A\x41\x2B\x8D\x5F\xEC\x8F\x1B\x77\xC6\x84\x8D\x1B\x5F\xD9\x60\xB5\x35\xB6\x8E\x6D\x6B\x34\x63\xF4\xD2\x5E\x43\xED\x84\xBA\x4D\x35\x83\x6B\xA6\xE5\xDA\x73\x48\x5B\xE2\x17\x7B\x9C\x32\x64\x3A\xAD\xAB\x37\xB1\x77\x0F\x8C\x1D\xDA\x4A\xFF\xE1\x5F\x67\x6B\xD9\xE5\xDD\x78\xD4\x1E\x33\x63\xDC\x15\x3F\x7D\x65\xE3\xE3\xFF\xF7\x73\xD6\xF6\x75\x4B\xC7\x6E\x5F\xB7\x14\x80\xE2\x8A\x7E\x0D\x07\xF5\x03\x07\x34\xDE\x46\x49\x71\x9A\x28\x8E\xB8\xEF\xCE\x9B\xB8\xF2\x9A\x1B\xB8\xEB\xB9\x87\x70\x3C\xC7\xB0\x31\xED\x91\x6B\xCD\xB6\xE4\x3A\x73\x3B\xA4\x14\x25\xA5\x35\x65\x03\x55\xA2\x9C\x24\x51\x38\x9E\x8D\x8A\x15\x96\x6B\x13\x07\x11\x96\x63\x17\x4C\x01\x89\x4A\x12\xA4\x65\x21\x04\x48\x4B\x22\x2D\x8B\x30\x08\xB1\x2D\x8B\x24\x4E\xB0\x5C\x1B\x15\x27\x48\xDB\x4C\x6D\xAD\x35\x2A\x51\x08\x29\xF1\x0B\x4C\xD5\x4A\xB5\xBE\xBA\xF0\x65\x25\x2C\x19\x9D\x78\xE1\xD4\x2A\xD0\xB6\x10\x82\x30\x1F\x62\xD9\x36\x52\x0A\xC3\x58\xF3\x00\x5A\x32\xCD\x1D\x3B\xBC\xB4\x5F\xE2\xF8\xEE\x40\xDB\xB1\x1C\xA4\x00\x43\x74\xCE\x1E\x75\x2A\x67\x0D\xDF\xC9\x77\xEF\xD9\xC0\xF1\x93\xA7\x73\xD4\xA0\xBE\xD4\x17\x7F\xF1\xC3\x20\x01\x20\xD7\xD9\xDC\xD2\xB8\xFD\x9D\x1D\x45\x65\x7D\x4A\x2A\xFB\xD5\x0D\x3C\xA8\x8C\xD9\xDD\xE7\x1A\xA6\x9C\x38\x86\xDD\xBB\xEA\x79\xE1\xA1\x69\x34\x37\x77\x30\x6B\xDC\x59\x04\x59\x53\x04\xA4\x94\xD8\xBE\x53\x51\xDE\xB7\x7C\xAC\x5F\x92\x1E\x12\x47\x89\x23\xA4\x40\x2B\x4D\x94\x8F\xD0\xDA\x4C\x4F\x69\x59\xA6\x68\x08\x81\xEB\x9B\x85\xBE\x0B\x14\x30\x0C\xB4\x2C\xCB\x74\x20\xB1\xC2\xF6\xEC\x6E\x46\x26\xB1\x02\x6D\x0A\x84\x56\x9A\x7C\x47\x0E\xAD\x34\x4E\xCA\x2D\xAF\x1D\x3F\xE4\x9D\x30\x1B\xF4\xDD\xBF\xAD\x61\xA5\xED\xD8\x28\xA5\x91\x96\x91\x35\x42\x0A\xA4\x6D\x15\x2A\x34\x15\xE9\xF2\xE2\xB1\x25\x35\xA5\x43\xA4\x25\x1C\x04\xC4\x41\x44\x1C\xC5\xA0\x34\x96\x94\xDC\x74\xCB\x9D\x5C\x3A\x6F\x2E\x37\x7C\x67\x3C\x97\x5C\xDC\x72\x50\xF0\x00\x52\xC5\x95\x15\x83\x47\x4F\x1B\x5B\x7D\xE4\x88\x21\xD2\x72\x9C\x8F\xD4\x81\x8F\xFD\xE9\x6F\x38\x7E\x0D\xB7\xDE\xBE\x89\x05\x5F\xAE\x60\x72\xCD\x0A\x28\x30\x27\xCC\x85\x48\x29\x10\x96\xC4\x2B\xF6\xCC\xA0\xC2\x18\x2F\x6D\x04\xB0\x52\x09\x61\x2E\x44\x25\x09\x4E\xCA\x41\x08\x41\xB6\x2D\x0B\x4A\xE3\xA6\x8C\xA0\x8E\xC3\x98\x38\x8C\x51\x71\x82\x57\xE4\x21\x6D\x49\x67\x53\x47\x41\x60\x9B\xE2\xA4\x94\x22\xCA\x47\x08\xC0\x2B\xF1\x51\x4A\x91\x6B\xCD\xD2\x6F\x78\xFF\x29\x45\x15\xC5\x5B\x76\xAF\xDF\xE5\x04\xD9\xC0\x3C\xB4\x44\xE1\xF8\x2E\x71\x10\x77\x77\x32\x5E\xCA\x34\x1B\xF9\x8E\x1C\x51\x10\x13\xE5\x23\xA4\x25\x11\x02\x4E\x2F\x6A\xE1\xFA\xEB\x06\xF3\xC0\x4B\x0F\xB0\x6F\x7F\x96\xDB\x6E\xDB\xCA\x7F\x3F\xF5\xED\x8F\x04\xF0\x1F\xE3\x23\x01\x6C\x1F\xF2\x0D\x6A\xAA\xCA\xD9\xA7\x6A\xB9\xEA\xEC\x6B\x58\xDD\x31\x8D\xCB\x67\x5E\xD2\x5D\x39\x85\x25\x49\xA2\x84\x30\x13\xE0\xFA\x2E\x4E\xCA\x45\x25\x89\xD1\x76\xA2\x40\x23\xA3\x7F\x09\x73\x01\xB6\x67\x4C\x82\x28\x17\xE2\x15\xFB\x20\xC0\x72\x8C\x14\x09\x73\x21\x71\x3E\xC2\x4B\x7B\x24\x71\x42\x1C\x44\x78\x45\x3E\x42\x4A\x23\x90\xD3\x6E\xB7\x8E\xB4\x3D\x07\x95\x28\x7B\xF8\x94\x11\xAD\x6D\x0D\xAD\xE3\x5B\xF6\x34\xBF\xE5\xFA\x0E\x5E\xB1\x6F\x1E\x58\xDA\xC5\x72\x2C\x54\xA2\x88\xC3\x08\xBF\xD8\x27\x8E\x12\x6C\xD7\xDC\xAB\xB5\xE6\xE2\xC9\x9F\x65\xE0\xE4\x6B\xB9\x74\xFA\x5C\x1E\x7B\x68\x35\xE5\xA5\x69\x1A\x07\x2C\xE8\x11\x78\xFF\x14\x40\x80\xF7\xCA\xBE\xC8\xC0\x21\x27\x32\xEC\xA8\x23\xF9\xC2\x25\xF5\x1C\x79\x44\x31\xF3\x67\xCE\x01\x01\xF9\xF6\x1C\x52\x4A\x63\x41\x79\xB6\x69\xF8\x0B\x82\x56\x08\x81\xE5\x58\x24\x89\x22\xCA\x87\xA4\xCB\x8A\xB0\x6C\x23\x98\x93\x82\x6C\x49\x42\xC3\xCE\x38\x34\x5A\xD1\x2B\xF4\xC1\xAE\xEF\xA1\x94\x91\x33\xB6\x63\xA6\x74\x9C\x8F\xBA\xCD\xD5\x28\x1F\xE2\x15\xF9\x14\x57\x14\x1F\x57\x39\xA0\xF2\x8D\xED\x6F\x6F\x2B\x01\xAD\xD0\x66\xDA\xC7\xF9\x08\xC7\x73\x0D\x8B\x0B\x0F\x2F\x55\x92\x32\xDF\xE7\xDA\xDC\x78\xE9\x97\xF9\xC2\x9C\x7A\x74\x92\x61\xE6\xE5\x77\xB0\xAF\xB5\x1F\xF5\xC5\x97\xFF\x33\x28\x3E\x1E\x80\x60\xB4\xDA\x31\xE7\xDC\xC8\x82\x6F\x34\x70\xEA\x99\x3E\xD9\x6C\x8E\x0B\x8E\xFF\x0C\x96\x6B\x83\xD0\xA4\xCB\x8A\x0A\xD5\xD4\xC8\x10\xCB\xB1\x70\x53\x1E\x49\x14\x63\xD9\x92\x38\x30\x00\x09\x29\x0B\xEB\xA2\xF9\xEB\x97\xA4\x90\x42\xA2\x31\x4C\x14\x52\x74\xEB\x46\xCB\xB6\x0A\xAC\xB1\x4C\xE7\x52\x58\x3A\xF2\x9D\x79\x1C\xDF\x35\x85\xC6\x92\x8C\x9C\x76\xCC\xB8\xE3\xCE\x3D\x7E\x80\xB4\x6D\x21\x6D\x89\x94\x02\xA4\x00\x01\x7E\x91\x0F\x98\xB5\x31\xCC\x05\x14\x57\x95\x30\x7B\xFC\x2C\xD6\xD7\xEF\xE1\x85\x57\x4E\x62\xF9\xB2\x65\x5C\x76\x69\x05\x17\x4F\xCA\x7E\x2C\xF0\x00\xFE\xE5\x5D\x39\x77\xFD\x0F\x71\x5D\x8B\x41\x47\xF6\xE3\xC2\x0B\x63\x94\x2A\x65\xDA\xBC\xDB\xB0\x6C\x89\xB4\xAD\xEE\x66\xDF\x29\xF4\xBD\x42\x0A\xE2\x7C\x64\x12\x29\x49\x75\xF7\xB9\x51\x2E\xC4\xB2\x2D\xDC\xB4\x47\x1C\xC6\x48\x5B\x76\x77\x26\xB6\x67\xA3\x0B\xCC\x13\x42\x12\x64\x03\x5C\xDF\x4C\xFB\x38\x8C\x90\xD2\x14\x24\xCB\x29\xFC\x66\x10\x21\xA4\x2C\xFC\x66\x88\x94\x92\x28\x6F\xF4\xA4\x5F\xE2\xFF\x8F\xDF\xBC\xE2\xB4\xB9\x4C\x1C\x37\x88\x95\x2B\xD7\xE3\x78\xA5\xEC\x6B\x6C\x41\x11\xD3\x36\xF8\x9B\x1F\x1B\xC0\x7F\xD9\x8D\x09\x47\x7E\x17\x6F\xDB\x23\x54\x57\xA4\x79\xFA\xFB\x5F\xE1\xFF\xDC\xF2\x16\x97\x9F\x32\x17\x69\x5B\x04\x99\xC0\xAC\x2F\x8E\x65\x5A\x31\xDB\x22\xCE\x47\x58\xAE\xDD\xCD\x16\x55\x58\xD7\xA4\x6D\x61\x39\x26\xF9\xAE\xFE\x57\xDA\x86\x91\x49\x18\x17\xAE\x6B\xA4\x2D\xF1\xD2\x6E\x61\xCA\x46\xD8\x8E\x8D\x9B\x76\x71\x7C\x1B\x21\x25\x71\x60\x8C\x58\x2F\xED\xA1\x92\x04\xCB\xB6\x89\x23\xB3\x3D\x90\x2A\x4D\x99\xEF\xD1\xBA\xFB\xFF\xCD\x1A\x7F\x36\x9D\x9D\x39\xEA\x06\xAE\x24\xC8\x07\x5C\x30\xE9\x65\xC2\x38\xEC\x15\x78\x3D\x02\x10\xC0\x1B\x73\x2D\x7E\xCA\xA7\x79\xD8\xAF\xA9\xEE\x3B\x94\xCB\x2E\xAD\x62\xDE\x49\xB3\xB1\x0B\xDA\x2D\x49\x14\x96\x2D\x41\x18\x36\x01\xDD\x9D\x85\x90\x86\x35\x00\x49\xA2\x40\x0A\x84\x14\x58\x8E\x4D\x1C\xC4\x74\xB5\x99\x42\xCA\x6E\x80\x92\x82\xD4\x31\x66\x04\x84\xD9\xA0\x70\xAD\xD0\x7F\xC7\x8A\x30\x67\xAE\x29\x95\xD0\x25\x67\xA2\xC0\xF8\xA4\xDD\x7A\x32\x51\x1C\x35\xB0\x3F\x67\x0D\xDF\xCC\x1D\x0F\x38\x1C\x3B\xFE\x18\x16\x3F\xDD\x41\xA6\xAE\x67\x15\xB7\xD7\x00\xEE\xE9\x73\x15\xAB\xD7\xEE\xE4\xCC\x29\xDB\xB9\xEC\xEC\xB5\xFC\xF0\xFB\x7F\x26\x08\x23\x3E\x3B\xE1\x1C\x03\x96\x32\xFA\xCE\xF5\x5D\xB4\x06\x29\x8D\xA1\x10\x85\x11\x6E\xCA\x54\x46\xAD\x94\xF1\x04\x31\xFE\xA0\x55\x00\xB5\xCB\xC6\x92\x96\x19\x92\xE5\xD8\x08\x4C\x51\x10\x52\x74\x5F\xD3\x4A\x17\xD6\x52\x73\x4F\x12\x25\xA0\x34\x49\x68\x04\xBA\xD6\xC6\x64\xED\x6A\xFF\x6C\xD7\xE2\xEA\xB3\x2E\xC3\x4B\x85\x0C\x98\x52\xCE\xFC\x79\x59\xDE\x5A\xB5\x8D\xF3\xAE\x9D\xD3\x6B\xF0\x7A\x0C\x20\x40\x63\xFF\x6B\x59\xBB\x6D\x0C\xDB\x9A\xA6\x73\xD6\x39\x17\xA1\x14\xBC\xBB\x6E\x39\x71\x98\x74\x83\xD3\xD9\xD2\x69\x4C\x81\x24\x21\xC8\xE4\x11\x40\xB6\x3D\x43\x90\xC9\x1B\xF3\xB3\x30\x85\xF3\x1D\x39\x82\x4C\x1E\xDB\xB5\x01\xA3\x29\x93\x42\xF7\x81\x00\xA5\xB4\x11\xC6\x40\x97\xBB\x8D\x32\xD3\x12\x4D\xF7\x54\xEF\x8A\x30\x1F\xA0\x12\xC3\x44\x69\x09\x92\x28\x61\xEE\xE4\xCF\x92\xF2\x1C\x36\x6C\xDE\x4F\xD3\x2B\x2F\xD2\xDE\x19\xD3\xD2\xDA\xCC\x8D\x8B\x67\x1D\x12\x00\x7B\x7C\xB4\x03\xA0\x72\xFB\x2F\xB0\x2C\xC9\x35\xD7\x94\x90\x6B\x59\xC7\x53\x4B\x8E\x26\x49\x3C\x6E\x7F\xE6\x77\x68\xA5\x90\x96\xEC\x66\x8B\x4A\x14\x5A\xAB\x02\x23\x8D\x33\x22\xDE\x07\x8E\xE5\xD8\x38\x29\xC7\x98\xA2\x18\xD6\x58\x96\x85\x5B\x64\xDC\x69\x69\x5B\xDD\xFB\x26\x5E\x91\xD9\xD7\xD1\x4A\xA3\x93\x84\x02\x91\xBB\x25\x93\x8A\x15\x49\x6C\x2A\xB8\xED\x39\xCC\x99\x74\x16\xB3\x07\x3C\xC3\xB6\xB8\x3F\x25\x43\x6B\x78\x7A\xC9\x00\x92\x24\xA6\x65\xF0\xF5\x87\x04\x3C\xF8\x98\xA7\xB3\x9A\x07\x7F\x8D\xB2\xD2\x34\x5F\x5B\xF0\x02\x8F\xFF\xA5\x96\xF3\x27\xBD\x4A\xA2\x14\x73\x4F\xBA\xA0\xE0\x1E\x99\xA7\x6F\xF4\x5E\x82\xED\x3A\xC8\x02\xBB\xE2\x30\x46\x6B\x8D\xB4\x4C\xDB\x27\x04\x84\x99\x00\xAD\x35\xC2\x32\xEB\xA4\x16\x10\x66\x0B\xD3\x59\x6B\xDC\x22\x0F\xAF\xD8\x37\xAC\xED\xCC\x9B\x07\x52\x30\x59\x65\xC1\xB5\x49\xA2\xB8\xE0\x78\x9B\x94\xAE\x98\x39\x8F\x54\xBA\x9C\x36\x77\x28\x6F\xEE\x1A\x49\x6D\xBA\x85\xF2\xF2\xD2\x43\x0A\x1E\xF4\xE2\x78\xDB\xE6\xD2\x2B\x99\x3F\xB1\x9E\x39\x53\x56\x72\xF3\xC2\x61\xB4\xB7\x36\x31\x7F\xBE\x66\xD6\x84\xB3\x91\x85\x36\x2C\x55\x9A\xEA\xEA\x1A\x4C\xC7\xE1\x3A\xB8\x69\xD7\x24\xA9\x31\x66\xA8\xD2\x48\xCB\x18\x05\x2A\x4E\x48\xC2\x18\xDB\xB6\x90\xB2\xCB\x6D\x36\x22\x5A\x45\x49\xC1\x3D\xF1\x11\xC2\x98\xB3\x2A\x51\xDD\x6B\xA1\xED\xB9\xE6\xD9\x49\xC1\xFC\x99\x73\x39\xB0\xF2\x36\x8A\xD2\x1E\x7F\x7D\xEF\x58\xFA\x77\xDC\x46\xD4\x67\x1C\x52\x7C\x7C\xBD\x77\xB0\xE8\xD5\x01\xCB\x17\x5B\x2E\xE4\xE5\x67\x1C\x66\x8D\x7F\x8F\x1A\x77\x35\x8B\x9F\xB8\x8C\xAA\x72\x63\xA1\x47\x61\x4C\x94\x37\x2C\x8A\x63\xD3\x51\x84\x51\x40\x12\xC4\xC6\x23\x74\xAC\x82\xA8\x86\x38\x4C\xBA\x0B\x88\x9B\xF2\x90\x8E\x45\xD7\x8E\xA3\x2A\x4C\x73\x53\x79\xAD\xEE\x2E\x46\x58\x12\xBF\xC4\x37\xAD\xA2\x8A\x8D\x09\x1B\xC6\x38\xBE\x8B\xF3\xEE\x02\x4A\x9B\xF3\x64\x3A\x3F\xC7\x7B\x9B\xDE\xA1\xB3\xDF\x57\xD8\x78\x47\x40\x6B\xED\x75\x87\x00\xB2\x0F\x46\xAF\x0E\x58\x76\x0C\xF9\x06\xE5\xA5\x3E\xEB\x3B\x8F\x65\xC9\x9E\x39\x9C\x3F\x69\x19\xCD\x6D\x07\x38\xFF\xB8\xF3\xB0\x6D\x03\x42\x1C\x44\x08\x01\x41\x26\x6F\x74\x61\xCA\x6C\x03\x98\x3E\x35\x26\x0A\x62\xC3\x22\xA5\x50\x89\xC6\x2E\x98\xAF\x5A\x69\x2C\xDB\x42\xDA\x16\x49\x1C\x83\x86\x6C\x6B\xB6\x50\xC1\x05\xBA\x50\x54\x92\x38\x29\x38\xDB\x46\x3E\x7D\xFE\xE4\xCF\x91\x1F\xF6\x23\x9A\x46\x7E\x97\x24\x4E\xF8\xEF\xCF\xD6\xE3\xFB\xA9\x4F\x04\x3C\x38\x04\x67\xA4\xB7\x94\x5D\xC5\x8B\xF7\x5E\xC5\xB9\x35\x0F\x72\xF3\xA2\xE1\x94\xA6\x7C\xE6\xD4\xFD\x9E\x4B\xA7\x5F\x82\x4A\x0C\x28\x46\x1F\x16\xA6\x63\x10\x91\xC4\xAA\xC0\x4E\xD1\xBD\x61\xA4\x94\x69\xFC\xB3\xED\xB9\x6E\x81\x6C\x40\xEA\xF2\xF5\x14\xA9\xD2\x34\x56\xA1\xC2\xC6\x05\xD1\x8D\xD2\x46\xFB\xE5\x43\xE6\x9F\x3C\x97\xCF\x4D\x7B\x91\x54\xBA\x9C\x54\x71\x05\x13\x26\x0C\xE7\x6D\xF1\x6D\xF6\x1D\x71\x75\xAF\x81\x3A\x58\x1C\x92\x43\xE6\x47\x9D\x72\x13\xBF\xAB\xBF\x88\x05\xD7\xFA\x7C\xFA\xD8\xBF\xF0\x5C\xCB\x15\x6C\x78\x77\x0D\x73\x3F\x75\x51\xB7\x40\x8E\xC2\x88\x5C\x6B\x16\xAF\xC8\x37\x1B\x40\x05\x86\xDA\x9E\x8D\xB4\x2D\xFC\xB4\xDF\x5D\x00\x82\x4C\xDE\x1C\x28\xC2\x78\x81\x49\x64\x34\x5E\x98\x0F\x8D\x41\xEB\x9A\xDD\x36\xA5\x34\x1A\x8D\xED\x58\x5C\x79\xDA\x3C\x6A\x2A\x15\x62\xD0\x4C\x8E\xE8\x53\x8A\x14\x1E\x7F\xFD\xDB\x3A\x26\x1E\xF3\xC2\xA1\x48\xF1\xA0\x71\x48\x00\xEC\x18\xF2\x0D\xAA\x2A\x4A\xB9\xE7\x07\x8B\xB9\x6B\xC9\x58\x2E\x38\xF1\x35\xCE\x38\xE3\x64\xE2\xD8\xB4\x51\x96\x63\x21\x30\x52\xA3\x4B\xB7\x39\xBE\x8B\x57\xE4\x11\xE5\x42\xD3\xFB\x4A\x89\xED\xD9\x78\x69\xB7\x60\x52\x18\x96\x49\xCB\x58\xFB\x48\x90\x05\x23\x22\xCC\x98\x43\x02\x76\xC1\xF6\xBF\x78\xD2\x6C\xA2\x58\x31\xBA\xE3\xA7\xDC\x79\xDB\x5E\xD6\xDD\x7D\x3E\xFB\xF7\xAD\x43\xC5\x09\x37\xFE\xF5\x27\x87\x22\xC5\x83\xC6\x21\x7B\xCD\x61\x43\xFA\x32\x46\x0E\xAE\xE2\x38\xFB\x19\xFE\xB0\x6C\x12\x5B\xB6\xEE\x63\xC1\x97\x0E\x70\xDD\xAC\xAB\x8D\x41\x6A\x49\x12\x65\x2C\x2C\xB3\xDE\x99\xE9\x2D\x0A\x76\x98\x4A\x12\x74\x61\x5D\x44\x53\x10\xD7\x46\xE8\x99\xD6\x2E\x36\x2E\x0B\x14\xAA\xAF\x69\x03\xE7\x9E\x74\x21\x9F\x9E\xD2\x4E\x79\xA9\xCF\x73\x9D\xD7\x73\xD5\x17\x7C\xBE\xF4\x1F\xE7\x32\x70\xF0\x04\xDA\x87\x7C\xE3\x50\xA5\x77\xD0\x38\xA4\xEF\x89\x6C\x88\x3F\xC5\xCE\xCA\x2F\xD1\xB7\x4F\x19\x17\x0D\x7A\x02\xE1\x4C\x64\x54\xC7\xD7\xB9\x7C\xC6\x5C\xD0\x1A\xBF\xD8\xEF\x3E\x81\xE5\xF8\x66\x67\x4E\x08\x0A\xD7\xF3\x68\xA5\xB1\x5D\x07\xA5\x14\x2A\x4E\x70\xD3\x1E\x51\xBE\xE0\x6A\x7B\x46\x4B\x6A\x0D\xB6\xEF\x98\x35\x6F\xFA\x25\x9C\x7B\xDA\x3E\x2A\xEB\x42\xB2\x9D\xAD\xD4\x54\xF9\xFC\xFC\xD6\x84\x7B\x56\x9C\xC1\xD6\xF2\xCF\x1F\xCA\xD4\x0E\x1A\x87\x14\xC0\xE6\xC1\x5F\xC3\x76\x1C\x4E\x3E\x65\x2F\xA9\x1A\x97\x39\x17\xDE\xC2\xB0\x79\x77\x92\xC9\x66\x38\x6F\xC2\xB9\xC8\x82\x1F\x68\x39\x16\x61\x36\x40\x60\xC0\x08\x0B\x46\xA9\xB4\xA5\x39\x03\xA8\x35\x8E\xE7\xA0\x62\xD5\xDD\x1B\x47\xF9\x90\x7C\x47\x1E\xEB\x7D\x53\x38\x51\x8A\x23\x06\x3A\xEC\xFA\xE3\xEF\x68\x7A\xF3\x76\x66\x9F\xDF\x0F\x21\xA0\xAA\xF8\xD0\xEB\xBD\x83\xC5\x21\x7F\x53\x69\x67\xD5\x17\x78\xE0\x41\x1B\xEA\x26\xF3\xBF\xCE\x38\x89\x2F\x5E\xF9\x5B\x2C\x69\x31\xA4\xB6\x1F\x51\x10\x99\xAD\xCB\xC0\x68\x36\xCB\xB3\x11\x08\x03\xAC\x94\xE6\xDF\xB6\x65\x76\xF1\x82\x08\x69\x1B\xB3\xB5\xAB\x25\x4C\x97\xA7\x4D\x61\xF1\x1D\x66\x4F\x3C\x83\x38\x8A\xB9\xEB\xDE\x72\xA4\x88\x38\xF5\xCA\x9F\x70\xDE\x71\xE7\xA1\x94\x62\x5D\xF1\x27\x3F\x75\xBB\xE2\x13\x79\xD5\xEB\x40\x4B\x07\xCF\x2E\x1D\xC4\xB2\x37\xB6\x31\x66\xDC\x14\x46\x8F\xEC\xCB\xA8\xE2\x57\xB8\x61\xCE\x02\x54\x62\x4E\x11\x78\xC5\x3E\x51\x3E\x42\x25\x0A\x27\xE5\xE2\xA6\xDD\x6E\xB9\x13\xE5\xCD\x5E\xB2\xC0\x80\x65\xCE\x50\x7B\x04\x9D\x79\x92\x38\xE6\xE2\x13\xCF\x67\x88\x78\x81\xFE\x7D\x8B\xC9\x06\x19\x5A\x46\xFE\x9E\xFD\x4D\x59\x4E\xBE\xF2\xC7\x74\xD4\x7D\xEB\x93\x48\xE9\xA0\xF1\x89\x00\xD8\x56\xFB\x4D\x76\xEF\x69\x67\xCA\xD4\x33\x49\xB7\x2D\x66\x98\x73\x27\xCB\x77\x1F\xCD\xF3\xCF\x3D\xCD\xFC\x19\x73\x10\x52\x18\xCB\xA9\xB0\xEB\x96\x84\x89\xD9\x79\x2B\x1C\x52\x42\x43\x98\x0F\x89\x82\x98\xA0\x23\x6F\x3A\x90\x28\x46\x48\xC1\x95\xA7\xCE\xC3\x3D\xF0\x28\x93\x4E\xB0\x68\x6E\x6F\x67\xF7\xD6\x4D\xAC\x7E\x7B\x23\x1B\xEA\x9B\x68\x1D\xD8\x3B\x73\xF4\xE3\xC4\x27\xF6\xB2\x61\x43\xBF\x6B\x98\x3A\x79\x2C\x4F\xBC\x92\x65\xA7\x75\x2D\xA9\xB7\xAE\xE3\xA6\x9B\x8F\xA7\x33\xD3\xC9\x99\xA3\x4E\x29\xEC\x81\x18\xBF\x10\xBA\x9C\x19\x8B\x28\x8C\x11\x96\x34\x9B\x42\x02\x63\xBC\x0A\x81\x52\x8A\x2B\x4E\xBB\x94\x38\x4A\x38\xA9\xEF\x46\x76\xDB\x0B\xA8\x68\x7A\x8C\x5B\xBE\x29\xC8\x64\x33\xCC\x39\xAF\xFD\x93\x4A\xE5\x23\xE3\x13\x7D\x5B\xF3\x85\xA5\x6F\xF2\xD8\xB7\xFB\x90\xF6\x97\x50\xF7\xE9\x8B\xB9\xFF\xFE\x04\xD7\xF5\x18\x77\x6C\x5D\xB7\x2E\x8C\x43\xD3\x99\xA4\x4B\x8B\xD0\x85\xE2\x81\xD6\xE4\xDA\xB3\x85\x53\x5D\x16\x5A\xC3\x67\x27\x9E\xCB\xA0\x01\x65\xE4\x83\x3C\x2F\x8B\xEF\xA1\x57\xCC\xA1\x31\x75\x1C\x8B\x5F\x9B\x48\x47\x67\x07\xBF\x7C\xE3\x86\x4F\x32\x95\x83\xC6\x27\x0A\xE0\xAE\xEA\x2F\xB2\xAE\xE8\x5B\xEC\xDA\x37\x9D\x35\xDB\xA7\xA0\x91\x5C\x38\xFB\x64\x36\xAF\x5F\xC3\xF7\x2E\xFD\x9A\xB1\xE8\x63\xA3\xFF\xB2\xED\x19\xD3\x65\xD8\x66\x47\xCF\x72\x6C\xE3\xF1\xA9\x84\x8B\x4F\x3C\x8F\x92\x92\x34\x3F\xFF\xEA\x45\xD4\x0E\xEA\x43\x18\x46\x2C\xDA\x31\x97\x81\xB5\x13\xD8\xBA\xAB\x95\x70\xE4\x77\x3F\xC9\x34\x3E\x32\xFE\x1F\xB9\xD0\x35\xFC\x39\x1E\x26\x13\x00\x00\x00\x00\x49\x45\x4E\x44\xAE\x42\x60\x82'
        image = output.getvalue()
        #image += output.read()
        #output.close()

        global window #TODO try to avoid global
        window.switch_to()
        window.model.reload()
        window.dispatch_events()
        window.dispatch_event('on_draw')
        window.flip()
        return image